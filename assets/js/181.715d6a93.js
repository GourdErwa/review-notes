(window.webpackJsonp=window.webpackJsonp||[]).push([[181],{553:function(a,t,v){"use strict";v.r(t);var e=v(10),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,v=a._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("blockquote",[v("p",[a._v("专栏原创出处："),v("a",{attrs:{href:"https://github.com/GourdErwa/review-notes/tree/master/language/java-jvm",target:"_blank",rel:"noopener noreferrer"}},[a._v("github-源笔记文件 "),v("OutboundLink")],1),a._v(" ，"),v("a",{attrs:{href:"https://github.com/GourdErwa/java-advanced/tree/master/java-jvm",target:"_blank",rel:"noopener noreferrer"}},[a._v("github-源码 "),v("OutboundLink")],1),a._v("，欢迎 Star，转载请附上原文出处链接和本声明。")])]),a._v(" "),v("p",[a._v("Java JVM-虚拟机专栏系列笔记，系统性学习可访问个人复盘笔记-技术博客 "),v("a",{attrs:{href:"https://review-notes.top/language/java-jvm/",target:"_blank",rel:"noopener noreferrer"}},[a._v("Java JVM-虚拟机 "),v("OutboundLink")],1)]),a._v(" "),v("p"),v("div",{staticClass:"table-of-contents"},[v("ul",[v("li",[v("a",{attrs:{href:"#一、前言"}},[a._v("一、前言")])]),v("li",[v("a",{attrs:{href:"#二、对象存活的判断算法"}},[a._v("二、对象存活的判断算法")]),v("ul",[v("li",[v("a",{attrs:{href:"#_1-引用计数算法"}},[a._v("1. 引用计数算法")])]),v("li",[v("a",{attrs:{href:"#_2-可达性分析算法"}},[a._v("2. 可达性分析算法")])])])]),v("li",[v("a",{attrs:{href:"#三、死亡过程"}},[a._v("三、死亡过程")])]),v("li",[v("a",{attrs:{href:"#总结"}},[a._v("总结")])]),v("li",[v("a",{attrs:{href:"#参考"}},[a._v("参考")])])])]),v("p"),a._v(" "),v("h2",{attrs:{id:"一、前言"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一、前言"}},[a._v("#")]),a._v(" 一、前言")]),a._v(" "),v("p",[a._v("在堆里面存放着 Java 世界中几乎所有的对象实例，垃圾收集器在对堆进行回收前，第一件事情就是要确定这些对象之中哪些还「存活」着，哪些已经「死去」")]),a._v(" "),v("blockquote",[v("p",[a._v("「死去」即不可能再被任何途径使用的对象。")])]),a._v(" "),v("h2",{attrs:{id:"二、对象存活的判断算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二、对象存活的判断算法"}},[a._v("#")]),a._v(" 二、对象存活的判断算法")]),a._v(" "),v("h3",{attrs:{id:"_1-引用计数算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-引用计数算法"}},[a._v("#")]),a._v(" 1. 引用计数算法")]),a._v(" "),v("p",[a._v("引用计数算法很简单，它实际上是通过在对象头中分配一个空间来保存该对象被引用的次数。")]),a._v(" "),v("ul",[v("li",[a._v("如果该对象被其它对象引用，则它的引用计数加一")]),a._v(" "),v("li",[a._v("如果删除对该对象的引用，那么它的引用计数就减一")]),a._v(" "),v("li",[a._v("当该对象的引用计数为 0 时，那么该对象就会被回收")])]),a._v(" "),v("p",[a._v("如果对象 a 和 b 都有字段 instance，赋值令 a.instance=b 及 b.instance=a ，此时出现了循环引用问题。解决循环引用的问题需要配合其他大量的工作。")]),a._v(" "),v("p",[a._v("Java 虚拟机并"),v("strong",[a._v("不是通过引用计数算法来判断")]),a._v("对象是否存活的。")]),a._v(" "),v("h3",{attrs:{id:"_2-可达性分析算法"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-可达性分析算法"}},[a._v("#")]),a._v(" 2. 可达性分析算法")]),a._v(" "),v("p",[a._v("算法基本思路如下：")]),a._v(" "),v("ul",[v("li",[a._v("通过一系列称为「GC Roots」的根对象作为起始节点集")]),a._v(" "),v("li",[a._v("从这些节点开始，根据引用关系向下搜索，搜索过程所走过的路径称为「引用链」（Reference Chain）")]),a._v(" "),v("li",[a._v("如果某个对象到 GC Roots 间没有任何引用链相连，或者用图论的话来说就是从 GC Roots 到这个对象不可达时")]),a._v(" "),v("li",[a._v("则证明此对象是不可能再被使用的")])]),a._v(" "),v("div",{attrs:{align:"center"}},[v("img",{attrs:{src:"https://blog-review-notes.oss-cn-beijing.aliyuncs.com/language/java-jvm/_images/利用可达性分析算法判定对象是否可回收.jpeg",height:"550px"}})]),a._v(" "),v("p",[a._v("在 Java 技术体系里面，固定可作为 GC Roots 的对象包括以下几种：")]),a._v(" "),v("ul",[v("li",[a._v("在虚拟机栈（栈帧中的本地变量表）中引用的对象，比如各个线程被调用的方法堆栈中使用到的参数、局部变量、临时变量等。")]),a._v(" "),v("li",[a._v("在方法区中类静态属性引用的对象，比如 Java 类的引用类型静态变量。")]),a._v(" "),v("li",[a._v("在方法区中常量引用的对象，比如字符串常量池（String Table）里的引用。")]),a._v(" "),v("li",[a._v("在本地方法栈中 JNI（即通常所说的 Native 方法）引用的对象。")]),a._v(" "),v("li",[a._v("Java 虚拟机内部的引用，如基本数据类型对应的 Class 对象，一些常驻的异常对象（比如 NullPointExcepiton、OutOfMemoryError）等，还有系统类加载器。")]),a._v(" "),v("li",[a._v("所有被同步锁（synchronized 关键字）持有的对象。")]),a._v(" "),v("li",[a._v("反映 Java 虚拟机内部情况的 JMXBean、JVMTI 中注册的回调、本地代码缓存等。")])]),a._v(" "),v("p",[a._v("除了这些固定的 GC Roots 集合以外，根据用户所选用的垃圾收集器以及当前回收的内存区域不同，还可以有其他对象「临时性」地加入，共同构成完整 GC Roots 集合。")]),a._v(" "),v("p",[a._v("如果只针对堆中某一块区域进行垃圾收集时，必须考虑其他区域可能引用该区域对象，此时需要将这些关联区域的对象也一并加入 GC Roots 集合中去，才能保证可达性分析的正确性。")]),a._v(" "),v("p",[a._v("Java 虚拟机"),v("strong",[a._v("通过可达性分析算法判断")]),a._v("对象是否存活的。")]),a._v(" "),v("h2",{attrs:{id:"三、死亡过程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三、死亡过程"}},[a._v("#")]),a._v(" 三、死亡过程")]),a._v(" "),v("p",[v("strong",[a._v("1）第一次标记")])]),a._v(" "),v("p",[a._v("对象在进行可达性分析后发现没有与 GC Roots 相连接的引用链，那它将会被"),v("strong",[a._v("第一次标记")]),a._v("。")]),a._v(" "),v("p",[v("strong",[a._v("2）第二次标记")])]),a._v(" "),v("ul",[v("li",[v("p",[a._v("假如对象没有覆盖 finalize 方法，或者 finalize 方法已经被虚拟机调用过，那么不执行 finalize 方法。\n如果有必要执行 finalize 方法，那么该对象将会被放置在一个名为 F-Queue 的队列之中，并在稍后由一条由虚拟机自动建立的、低调度优先级的 Finalizer 线程去执行它们的 finalize 方法。")])]),a._v(" "),v("li",[v("p",[a._v("finalize 方法是对象逃脱死亡命运的最后一次机会，稍后收集器将对 F-Queue 中的对象进行"),v("strong",[a._v("第二次小规模的标记")]),a._v("，如果对象要在 finalize 中成功拯救自己，只要重新与引用链上的任何一个对象建立关联即可。\n如果对象这时候还没有逃脱，那基本上它就真的要被回收了。")])])]),a._v(" "),v("blockquote",[v("p",[a._v("这里所说的「执行 finalize 方法」是指虚拟机会触发这个方法开始运行，但并不承诺一定会等待它运行结束。这样做的原因是，如果某个对象的 finalize 方法执行缓慢，或者更极端地发生了死循环，将很可能导致 F-Queue 队列中的其他对象永久处于等待，甚至导致整个内存回收子系统的崩溃。")])]),a._v(" "),v("div",{attrs:{align:"center"}},[v("img",{attrs:{src:"https://blog-review-notes.oss-cn-beijing.aliyuncs.com/language/java-jvm/_images/虚拟机对象死亡过程-流程图.png"}})]),a._v(" "),v("h2",{attrs:{id:"总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[a._v("#")]),a._v(" 总结")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("对象存活判断可通过「引用计数算法」「可达性分析算法」，Java 虚拟机使用「可达性分析算法」。")])]),a._v(" "),v("li",[v("p",[a._v("对象死亡过程不是在不可达 GC Roots 时直接回收，而是结合了 finalize 方法处理，可以在 finalize 进行自救。")])]),a._v(" "),v("li",[v("p",[v("a",{attrs:{href:"https://blog.csdn.net/xiaohulunb/article/details/103828111",target:"_blank",rel:"noopener noreferrer"}},[a._v("Java JVM 对象的创建与访问过程"),v("OutboundLink")],1)])])]),a._v(" "),v("h2",{attrs:{id:"参考"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[a._v("#")]),a._v(" 参考")]),a._v(" "),v("ul",[v("li",[a._v("《深入理解 Java 虚拟机：JVM 高级特性与最佳实践（第 3 版）》周志明 著")])])])}),[],!1,null,null,null);t.default=r.exports}}]);