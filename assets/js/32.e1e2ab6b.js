(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{407:function(t,a,s){"use strict";s.r(a);var i=s(10),e=Object(i.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#树和森林"}},[t._v("树和森林")])]),s("li",[s("a",{attrs:{href:"#树的存储结构"}},[t._v("树的存储结构")])]),s("li",[s("a",{attrs:{href:"#树和二叉树的转换"}},[t._v("树和二叉树的转换")])]),s("li",[s("a",{attrs:{href:"#树和森林的遍历"}},[t._v("树和森林的遍历")])]),s("li",[s("a",{attrs:{href:"#参考"}},[t._v("参考")])])])]),s("p"),t._v(" "),s("h2",{attrs:{id:"树和森林"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#树和森林"}},[t._v("#")]),t._v(" 树和森林")]),t._v(" "),s("p",[t._v("具有 "),s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",[s("semantics",[s("mrow",[s("mi",[t._v("n")]),s("mo",[t._v("(")]),s("mi",[t._v("n")]),s("mo",[t._v("≥")]),s("mn",[t._v("0")]),s("mo",[t._v(")")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("n(n\\ge 0)")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"strut",staticStyle:{height:"0.75em"}}),s("span",{staticClass:"strut bottom",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),s("span",{staticClass:"base textstyle uncramped"},[s("span",{staticClass:"mord mathit"},[t._v("n")]),s("span",{staticClass:"mopen"},[t._v("(")]),s("span",{staticClass:"mord mathit"},[t._v("n")]),s("span",{staticClass:"mrel"},[t._v("≥")]),s("span",{staticClass:"mord mathrm"},[t._v("0")]),s("span",{staticClass:"mclose"},[t._v(")")])])])]),t._v("个结点的有限集称为树。"),s("br"),t._v(" "),s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",[s("semantics",[s("mrow",[s("mi",[t._v("m")]),s("mo",[t._v("(")]),s("mi",[t._v("m")]),s("mo",[t._v("≥")]),s("mn",[t._v("0")]),s("mo",[t._v(")")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("m(m\\ge 0)")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"strut",staticStyle:{height:"0.75em"}}),s("span",{staticClass:"strut bottom",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),s("span",{staticClass:"base textstyle uncramped"},[s("span",{staticClass:"mord mathit"},[t._v("m")]),s("span",{staticClass:"mopen"},[t._v("(")]),s("span",{staticClass:"mord mathit"},[t._v("m")]),s("span",{staticClass:"mrel"},[t._v("≥")]),s("span",{staticClass:"mord mathrm"},[t._v("0")]),s("span",{staticClass:"mclose"},[t._v(")")])])])]),t._v(" 个互不相交的树的集合称为森林。")]),t._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://vista-image.oss-cn-beijing.aliyuncs.com/datastructure/image/树_森林.png"}})]),t._v(" "),s("h2",{attrs:{id:"树的存储结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#树的存储结构"}},[t._v("#")]),t._v(" 树的存储结构")]),t._v(" "),s("h4",{attrs:{id:"双亲表示法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#双亲表示法"}},[t._v("#")]),t._v(" 双亲表示法")]),t._v(" "),s("p",[t._v("树的每个结点只有一个双亲，则结点由数据域和双亲域构成的存储方式称为双亲表示法。"),s("br"),t._v("\n数据域存放结点本身信息，双亲域指示本结点的双亲结点在数组中的位置，根节点的双亲域设置为 -1。")]),t._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://vista-image.oss-cn-beijing.aliyuncs.com/datastructure/image/树_双亲表示法.png",width:"30%"}})]),t._v(" "),s("p",[t._v("双亲表示法的特点：")]),t._v(" "),s("ul",[s("li",[t._v("根据结点的双亲域很容易找到其双亲结点，时间复杂度为 "),s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",[s("semantics",[s("mrow",[s("mi",[t._v("O")]),s("mo",[t._v("(")]),s("mn",[t._v("1")]),s("mo",[t._v(")")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(1)")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"strut",staticStyle:{height:"0.75em"}}),s("span",{staticClass:"strut bottom",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),s("span",{staticClass:"base textstyle uncramped"},[s("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),s("span",{staticClass:"mopen"},[t._v("(")]),s("span",{staticClass:"mord mathrm"},[t._v("1")]),s("span",{staticClass:"mclose"},[t._v(")")])])])]),t._v("；")]),t._v(" "),s("li",[t._v("双亲域为 -1 时，表示其为根节点；")]),t._v(" "),s("li",[t._v("查找结点的孩子结点不容易，只能通过遍历整个树结构。")])]),t._v(" "),s("h4",{attrs:{id:"孩子表示法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#孩子表示法"}},[t._v("#")]),t._v(" 孩子表示法")]),t._v(" "),s("p",[t._v("把每个结点的孩子结点排列起来，看成是一个线性表，用单链表存储称为孩子表示法。\n"),s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",[s("semantics",[s("mrow",[s("mi",[t._v("n")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("n")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"strut",staticStyle:{height:"0.43056em"}}),s("span",{staticClass:"strut bottom",staticStyle:{height:"0.43056em","vertical-align":"0em"}}),s("span",{staticClass:"base textstyle uncramped"},[s("span",{staticClass:"mord mathit"},[t._v("n")])])])]),t._v(" 个结点由 "),s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",[s("semantics",[s("mrow",[s("mi",[t._v("n")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("n")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"strut",staticStyle:{height:"0.43056em"}}),s("span",{staticClass:"strut bottom",staticStyle:{height:"0.43056em","vertical-align":"0em"}}),s("span",{staticClass:"base textstyle uncramped"},[s("span",{staticClass:"mord mathit"},[t._v("n")])])])]),t._v(" 个孩子链表（叶子的孩子链表为空表）；"),s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",[s("semantics",[s("mrow",[s("mi",[t._v("n")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("n")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"strut",staticStyle:{height:"0.43056em"}}),s("span",{staticClass:"strut bottom",staticStyle:{height:"0.43056em","vertical-align":"0em"}}),s("span",{staticClass:"base textstyle uncramped"},[s("span",{staticClass:"mord mathit"},[t._v("n")])])])]),t._v(" 个头指针又组成一个线性表，用顺序表存储。")]),t._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://vista-image.oss-cn-beijing.aliyuncs.com/datastructure/image/树_孩子链表.png",width:"30%"}})]),t._v(" "),s("p",[t._v("孩子表示法的特点：")]),t._v(" "),s("ul",[s("li",[t._v("根据结点的指针域很容易找到其孩子结点，时间复杂度为 "),s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",[s("semantics",[s("mrow",[s("mi",[t._v("O")]),s("mo",[t._v("(")]),s("mn",[t._v("1")]),s("mo",[t._v(")")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("O(1)")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"strut",staticStyle:{height:"0.75em"}}),s("span",{staticClass:"strut bottom",staticStyle:{height:"1em","vertical-align":"-0.25em"}}),s("span",{staticClass:"base textstyle uncramped"},[s("span",{staticClass:"mord mathit",staticStyle:{"margin-right":"0.02778em"}},[t._v("O")]),s("span",{staticClass:"mopen"},[t._v("(")]),s("span",{staticClass:"mord mathrm"},[t._v("1")]),s("span",{staticClass:"mclose"},[t._v(")")])])])]),t._v("；")]),t._v(" "),s("li",[t._v("指针域为空的结点为叶子结点；")]),t._v(" "),s("li",[t._v("查找结点的双亲结点不容易。")])]),t._v(" "),s("h4",{attrs:{id:"孩子兄弟表示法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#孩子兄弟表示法"}},[t._v("#")]),t._v(" 孩子兄弟表示法")]),t._v(" "),s("p",[t._v("用二叉链表作树的存储结构，链表中每个结点包含数据域、左指针域、右指针域的存储结构称为孩子兄弟表示法。")]),t._v(" "),s("ul",[s("li",[t._v("左指针指向第一个孩子结点；")]),t._v(" "),s("li",[t._v("右指针指向下一个兄弟结点。")])]),t._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://vista-image.oss-cn-beijing.aliyuncs.com/datastructure/image/树_孩子兄弟表示法.png",width:"25%"}})]),t._v(" "),s("p",[t._v("存储示例：")]),t._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://vista-image.oss-cn-beijing.aliyuncs.com/datastructure/image/树_二叉链表表示法.png",width:"30%"}})]),t._v(" "),s("p",[t._v("孩子兄弟表示法特点：")]),t._v(" "),s("ul",[s("li",[t._v("若要访问结点 "),s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",[s("semantics",[s("mrow",[s("mi",[t._v("p")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("p")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"strut",staticStyle:{height:"0.43056em"}}),s("span",{staticClass:"strut bottom",staticStyle:{height:"0.625em","vertical-align":"-0.19444em"}}),s("span",{staticClass:"base textstyle uncramped"},[s("span",{staticClass:"mord mathit"},[t._v("p")])])])]),t._v(" 的第 "),s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",[s("semantics",[s("mrow",[s("mi",[t._v("i")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("i")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"strut",staticStyle:{height:"0.65952em"}}),s("span",{staticClass:"strut bottom",staticStyle:{height:"0.65952em","vertical-align":"0em"}}),s("span",{staticClass:"base textstyle uncramped"},[s("span",{staticClass:"mord mathit"},[t._v("i")])])])]),t._v(" 个孩子：从左指针域找到第一个孩子结点；并沿着孩子结点的右指针域寻找 "),s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",[s("semantics",[s("mrow",[s("mi",[t._v("i")]),s("mo",[t._v("−")]),s("mn",[t._v("1")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("i-1")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"strut",staticStyle:{height:"0.65952em"}}),s("span",{staticClass:"strut bottom",staticStyle:{height:"0.74285em","vertical-align":"-0.08333em"}}),s("span",{staticClass:"base textstyle uncramped"},[s("span",{staticClass:"mord mathit"},[t._v("i")]),s("span",{staticClass:"mbin"},[t._v("−")]),s("span",{staticClass:"mord mathrm"},[t._v("1")])])])]),t._v(" 次便能找到对应的孩子。")]),t._v(" "),s("li",[t._v("查找结点的孩子容易，找双亲难。")])]),t._v(" "),s("h2",{attrs:{id:"树和二叉树的转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#树和二叉树的转换"}},[t._v("#")]),t._v(" 树和二叉树的转换")]),t._v(" "),s("p",[t._v("树与二叉树都可以使用链式存储，且树与二叉树的二叉链表是相同的，仅是指针域的含义不同，所以树和二叉树可以相互转换。")]),t._v(" "),s("h4",{attrs:{id:"树转换成二叉树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#树转换成二叉树"}},[t._v("#")]),t._v(" 树转换成二叉树")]),t._v(" "),s("p",[t._v("树转换成二叉树步骤：(兄弟相连留长子)")]),t._v(" "),s("ul",[s("li",[t._v("加线：在兄弟之间加一连线")]),t._v(" "),s("li",[t._v("抹线：对每个结点，除其左孩子外，去除其与其他孩子之间的关系")]),t._v(" "),s("li",[t._v("旋转：以树的根结点为轴心，将树顺时针转45度")])]),t._v(" "),s("h4",{attrs:{id:"二叉树转换成树"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二叉树转换成树"}},[t._v("#")]),t._v(" 二叉树转换成树")]),t._v(" "),s("p",[t._v("二叉树转换成树步骤：(左孩右右连双亲)")]),t._v(" "),s("ul",[s("li",[t._v("加线：若 "),s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",[s("semantics",[s("mrow",[s("mi",[t._v("p")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("p")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"strut",staticStyle:{height:"0.43056em"}}),s("span",{staticClass:"strut bottom",staticStyle:{height:"0.625em","vertical-align":"-0.19444em"}}),s("span",{staticClass:"base textstyle uncramped"},[s("span",{staticClass:"mord mathit"},[t._v("p")])])])]),t._v(" 结点是双亲结点的左孩子，则将 "),s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",[s("semantics",[s("mrow",[s("mi",[t._v("p")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("p")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"strut",staticStyle:{height:"0.43056em"}}),s("span",{staticClass:"strut bottom",staticStyle:{height:"0.625em","vertical-align":"-0.19444em"}}),s("span",{staticClass:"base textstyle uncramped"},[s("span",{staticClass:"mord mathit"},[t._v("p")])])])]),t._v(" 的右孩子，右孩子的右孩子..沿分支找到的所有右孩子，都与 "),s("span",{staticClass:"katex"},[s("span",{staticClass:"katex-mathml"},[s("math",[s("semantics",[s("mrow",[s("mi",[t._v("p")])],1),s("annotation",{attrs:{encoding:"application/x-tex"}},[t._v("p")])],1)],1)],1),s("span",{staticClass:"katex-html",attrs:{"aria-hidden":"true"}},[s("span",{staticClass:"strut",staticStyle:{height:"0.43056em"}}),s("span",{staticClass:"strut bottom",staticStyle:{height:"0.625em","vertical-align":"-0.19444em"}}),s("span",{staticClass:"base textstyle uncramped"},[s("span",{staticClass:"mord mathit"},[t._v("p")])])])]),t._v(" 的双亲用线连起来")]),t._v(" "),s("li",[t._v("抹线：去除原二叉树中双亲与右孩子之间的连线")]),t._v(" "),s("li",[t._v("调整：将结点按层次排列，形成树结构")])]),t._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://vista-image.oss-cn-beijing.aliyuncs.com/datastructure/image/树_树与二叉树的转换.png",width:"35%"}})]),t._v(" "),s("h4",{attrs:{id:"森林和二叉树的转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#森林和二叉树的转换"}},[t._v("#")]),t._v(" 森林和二叉树的转换")]),t._v(" "),s("p",[t._v("森林与二叉树转换时，把森林中第二棵树的根节点看成第一棵树根节点的兄弟结点即可。")]),t._v(" "),s("p",[t._v("森林转二叉树的步骤：(树变二叉根相连)")]),t._v(" "),s("ul",[s("li",[t._v("将各棵树分别转换成二叉树")]),t._v(" "),s("li",[t._v("将每棵树的根结点用线相连")]),t._v(" "),s("li",[t._v("以第一棵树的根结点为二叉树的根，再以根结点为轴心，顺时针旋转，构成二叉树型结构")])]),t._v(" "),s("p",[t._v("二叉树转森林的步骤：(去掉全部右孩先，孤立二叉再还原)")]),t._v(" "),s("ul",[s("li",[t._v("抹线：将二叉树中根结点与其右孩子连线，沿右分支搜索到的所有右孩子间连线全部抹掉，使之变成孤立的二叉树")]),t._v(" "),s("li",[t._v("还原：将孤立的二叉树还原成树")])]),t._v(" "),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://vista-image.oss-cn-beijing.aliyuncs.com/datastructure/image/树_森林二叉树转换.png",width:"30%"}})]),t._v(" "),s("h2",{attrs:{id:"树和森林的遍历"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#树和森林的遍历"}},[t._v("#")]),t._v(" 树和森林的遍历")]),t._v(" "),s("p",[t._v("树遍历的方法：")]),t._v(" "),s("ul",[s("li",[t._v("先根遍历：若树不为空，访问根结点；依次先根遍历各棵子树。")]),t._v(" "),s("li",[t._v("后根遍历：若树不为空，依次遍历各棵子树；访问根结点。")]),t._v(" "),s("li",[t._v("层次遍历：若树不为空，自上而下、自左至右访问树中每个结点。")])]),t._v(" "),s("p",[t._v("森林可以分为三个部分：森林中第一棵树的根结点、森林中第一棵树的子树森林、森林中其他树构成的森林")]),t._v(" "),s("p",[t._v("森林遍历的方法：")]),t._v(" "),s("ol",[s("li",[t._v("先序遍历：若树不为空，依次从左到右对森林中的每一棵树进行先根遍历")]),t._v(" "),s("li",[t._v("中序遍历：若树不为空，依次从左到右对森林中的每一棵树进行后根遍历")])]),t._v(" "),s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),s("ul",[s("li",[t._v("《数据结构(C语言版)》 严魏敏、吴伟民著")]),t._v(" "),s("li",[t._v("《数据结构(第3版)》 刘大有等著")])])])}),[],!1,null,null,null);a.default=e.exports}}]);