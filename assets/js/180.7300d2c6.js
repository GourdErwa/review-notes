(window.webpackJsonp=window.webpackJsonp||[]).push([[180],{552:function(t,v,_){"use strict";_.r(v);var e=_(10),a=Object(e.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("blockquote",[_("p",[t._v("专栏原创出处："),_("a",{attrs:{href:"https://github.com/GourdErwa/review-notes/tree/master/language/java-jvm",target:"_blank",rel:"noopener noreferrer"}},[t._v("github-源笔记文件 "),_("OutboundLink")],1),t._v(" ，"),_("a",{attrs:{href:"https://github.com/GourdErwa/java-advanced/tree/master/java-jvm",target:"_blank",rel:"noopener noreferrer"}},[t._v("github-源码 "),_("OutboundLink")],1),t._v("，欢迎 Star，转载请附上原文出处链接和本声明。")])]),t._v(" "),_("p",[t._v("Java JVM-虚拟机专栏系列笔记，系统性学习可访问个人复盘笔记-技术博客 "),_("a",{attrs:{href:"https://review-notes.top/language/java-jvm/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java JVM-虚拟机 "),_("OutboundLink")],1)]),t._v(" "),_("p"),_("div",{staticClass:"table-of-contents"},[_("ul",[_("li",[_("a",{attrs:{href:"#一、前言"}},[t._v("一、前言")])]),_("li",[_("a",{attrs:{href:"#二、分代收集"}},[t._v("二、分代收集")])]),_("li",[_("a",{attrs:{href:"#三、内存分配策略"}},[t._v("三、内存分配策略")])]),_("li",[_("a",{attrs:{href:"#四、内存回收策略"}},[t._v("四、内存回收策略")])]),_("li",[_("a",{attrs:{href:"#五、收集算法"}},[t._v("五、收集算法")]),_("ul",[_("li",[_("a",{attrs:{href:"#标记-清除算法"}},[t._v("标记-清除算法")])]),_("li",[_("a",{attrs:{href:"#标记-复制算法"}},[t._v("标记-复制算法")])]),_("li",[_("a",{attrs:{href:"#标记-整理算法"}},[t._v("标记-整理算法")])]),_("li",[_("a",{attrs:{href:"#算法示意图"}},[t._v("算法示意图")])]),_("li",[_("a",{attrs:{href:"#算法总结与应用场景"}},[t._v("算法总结与应用场景")])])])]),_("li",[_("a",{attrs:{href:"#总结"}},[t._v("总结")])]),_("li",[_("a",{attrs:{href:"#参考"}},[t._v("参考")])])])]),_("p"),t._v(" "),_("h2",{attrs:{id:"一、前言"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#一、前言"}},[t._v("#")]),t._v(" 一、前言")]),t._v(" "),_("p",[t._v("本节内容主要内容为：")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("为什么收集器要分代")])]),t._v(" "),_("li",[_("p",[t._v("如何分代")])]),t._v(" "),_("li",[_("p",[t._v("内存分配策略")])]),t._v(" "),_("li",[_("p",[t._v("内存回收策略")])]),t._v(" "),_("li",[_("p",[t._v("常见的垃圾回收算法及应用场景分析")])])]),t._v(" "),_("p",[t._v("因垃圾收集器不断发展，该内容只是针对常见的收集器分代模式介绍，具体以收集器实现细节为主。")]),t._v(" "),_("h2",{attrs:{id:"二、分代收集"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#二、分代收集"}},[t._v("#")]),t._v(" 二、分代收集")]),t._v(" "),_("p",[_("strong",[t._v("1）为什么要分代")])]),t._v(" "),_("ul",[_("li",[t._v("绝大多数对象都是朝生夕灭的。（年轻代）")]),t._v(" "),_("li",[t._v("熬过越多次垃圾收集过程的对象就越难以消亡。（老年代）")]),t._v(" "),_("li",[t._v("跨代引用相对于同代引用来说仅占极少数。（跨代引用较少）")]),t._v(" "),_("li",[t._v("垃圾收集器可以每次只回收其中某一个或者某些部分的区域。（按需收集）")]),t._v(" "),_("li",[t._v("针对不同的区域安排不同的的垃圾收集算法（标记-复制算法、标记-清除算法、标记-整理算法）。")])]),t._v(" "),_("p",[_("strong",[t._v("2）如何分代")])]),t._v(" "),_("p",[t._v("针对上面分代的经验法则，「多数商业虚拟机」在 Java 堆划分出不同的区域（年轻代、老年代）。")]),t._v(" "),_("ul",[_("li",[t._v("年轻代 ，又划分为 Eden 和 Survivor 2 个区域")]),t._v(" "),_("li",[t._v("老年代")])]),t._v(" "),_("p",[_("strong",[t._v("3）分代收集种类")])]),t._v(" "),_("p",[t._v("在虚拟机中一般根据 GC 作用及位置划分为以下几种：")]),t._v(" "),_("ul",[_("li",[t._v("部分收集（Partial GC）：指目标不是完整收集整个 Java 堆，其中又分为：\n"),_("ul",[_("li",[t._v("年轻代收集（Minor GC/Young GC）：只是年轻代的垃圾收集。")]),t._v(" "),_("li",[t._v("老年代收集（Major GC/Old GC）：只是老年代的垃圾收集。目前只有 CMS 收集器会有单独收集老年代的行为。")]),t._v(" "),_("li",[t._v("混合收集（Mixed GC）：收集整个年轻代以及部分老年代的垃圾收集。目前只有 G1 收集器会有这种行为。")])])]),t._v(" "),_("li",[t._v("整堆收集（Full GC）：收集整个 Java 堆和方法区的垃圾。")])]),t._v(" "),_("blockquote",[_("p",[t._v("请注意「Major GC」这个说法现在有点混淆，需按上下文区分到底是指老年代的收集还是整堆收集。")])]),t._v(" "),_("h2",{attrs:{id:"三、内存分配策略"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#三、内存分配策略"}},[t._v("#")]),t._v(" 三、内存分配策略")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("大多数情况下，对象在年轻代 Eden 区中分配")])]),t._v(" "),_("li",[_("p",[t._v("大对象直接进入老年代"),_("br"),t._v("\nHotSpot 虚拟机提供了-XX：PretenureSizeThreshold 参数，指定大于该设置值的对象直接在老年代分配，这样做的目的就是避免在 Eden 区及两个 Survivor 区之间来回复制，产生大量的内存复制操作")])]),t._v(" "),_("li",[_("p",[t._v("长期存活的对象将进入老年代"),_("br"),t._v("\n对象通常在 Eden 区里诞生，如果经过第一次 Young GC 后仍然存活，并且能被 Survivor 容纳的话，该对象会被移动到 Survivor 空间中，并且将其对象年龄设为 1 岁。对象在 Survivor 区中每熬过一次 Young GC，年龄就增加 1 岁，当它的年龄增加到一定程度（默认为 15），就会被晋升到老年代中。对象晋升老年代的年龄阈值，可以通过参数-XX：MaxTenuringThreshold 设置。")])]),t._v(" "),_("li",[_("p",[t._v("动态对象年龄判定"),_("br"),t._v("\n为了能更好地适应不同程序的内存状况，HotSpot 虚拟机并不是永远要求对象的年龄必须达到-XX：MaxTenuringThreshold 才能晋升老年代，如果在 Survivor 空间中相同年龄所有对象大小的总和大于 Survivor 空间的一半，年龄大于或等于该年龄的对象就可以直接进入老年代，无须等到-XX：MaxTenuringThreshold 中要求的年龄。")])])]),t._v(" "),_("h2",{attrs:{id:"四、内存回收策略"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#四、内存回收策略"}},[t._v("#")]),t._v(" 四、内存回收策略")]),t._v(" "),_("p",[_("strong",[t._v("1）Young GC")])]),t._v(" "),_("p",[t._v("年轻代中的 Eden 区分配满的时候触发。注意 Young GC 中有部分存活对象会晋升到老年代，所以 Young GC 后老年代的占用量通常会有所升高")]),t._v(" "),_("p",[_("strong",[t._v("2）Old GC")])]),t._v(" "),_("p",[t._v("目前只有 CMS 收集器会有单独收集老年代的行为")]),t._v(" "),_("p",[_("strong",[t._v("3）Full GC")])]),t._v(" "),_("ul",[_("li",[_("p",[t._v("在发生 Young GC 之前，虚拟机必须先检查老年代最大可用的连续空间是否大于年轻代所有对象总空间")]),t._v(" "),_("ul",[_("li",[t._v("如果条件成立，那这一次 Young GC 可以确保是安全的")]),t._v(" "),_("li",[t._v("如果条件不成立，则虚拟机会先查看-XX：HandlePromotionFailure 参数的设置值是否允许担保失败\n"),_("ul",[_("li",[t._v("如果允许担保失败，继续检查老年代最大可用的连续空间是否大于历次晋升到老年代对象的平均大小\n"),_("ul",[_("li",[t._v("如果大于，将尝试进行一次 Young GC")]),t._v(" "),_("li",[t._v("如果小于，改为进行一次 Full GC")])])]),t._v(" "),_("li",[t._v("如果不允许担保失败，改为进行一次 Full GC")])])])])]),t._v(" "),_("li",[_("p",[t._v("元空间分配时没有足够空间时，触发 Full GC")])]),t._v(" "),_("li",[_("p",[t._v("System.gc 方法、heap dump 时带 GC，默认触发 Full GC")])])]),t._v(" "),_("h2",{attrs:{id:"五、收集算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#五、收集算法"}},[t._v("#")]),t._v(" 五、收集算法")]),t._v(" "),_("h3",{attrs:{id:"标记-清除算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#标记-清除算法"}},[t._v("#")]),t._v(" 标记-清除算法")]),t._v(" "),_("ul",[_("li",[t._v("「标记」首先标记出所有需要回收的对象，也可以反过来，标记存活的对象。标记过程就是对象是否属于垃圾的判定过程。")]),t._v(" "),_("li",[t._v("「清理」清理回收")])]),t._v(" "),_("p",[t._v("主要优点：")]),t._v(" "),_("ul",[_("li",[t._v("不需要移动对象")])]),t._v(" "),_("p",[t._v("主要缺点：")]),t._v(" "),_("ul",[_("li",[t._v("执行效率不稳定，如果 Java 堆中包含大量对象，其中大部分是需要被回收的，这时必须进行大量标记和清除的动作")]),t._v(" "),_("li",[t._v("存空间的碎片化问题，标记、清除之后会产生大量不连续的内存碎片，内存碎片太多可能会导致当以后在程序运行过程中需要分配较大对象时无法找到足够的连续内存而不得不提前触发另一次垃圾收集动作")])]),t._v(" "),_("h3",{attrs:{id:"标记-复制算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#标记-复制算法"}},[t._v("#")]),t._v(" 标记-复制算法")]),t._v(" "),_("ul",[_("li",[t._v("「内存切分」它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。")]),t._v(" "),_("li",[t._v("「复制-清理」当这一块的内存用完了，就将还存活着的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉。")])]),t._v(" "),_("p",[t._v("主要优点：")]),t._v(" "),_("ul",[_("li",[t._v("分配内存时也就不用考虑有空间碎片的复杂情况")])]),t._v(" "),_("p",[t._v("主要缺点：")]),t._v(" "),_("ul",[_("li",[t._v("算法将会产生大量的内存间复制的开销")]),t._v(" "),_("li",[t._v("可用内存缩小为了原来的一半")])]),t._v(" "),_("blockquote",[_("p",[t._v("老年代对象存活率高，一般不会采用此算法")])]),t._v(" "),_("h3",{attrs:{id:"标记-整理算法"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#标记-整理算法"}},[t._v("#")]),t._v(" 标记-整理算法")]),t._v(" "),_("ul",[_("li",[t._v("「标记」首先标记出所有需要回收的对象，也可以反过来，标记存活的对象。标记过程就是对象是否属于垃圾的判定过程。")]),t._v(" "),_("li",[t._v("「整理」让存活的对象都向内存空间一端移动（将存活的与要死亡对象的分开）")]),t._v(" "),_("li",[t._v("「清理」清理边界以外的内存")])]),t._v(" "),_("p",[t._v("主要优点：")]),t._v(" "),_("ul",[_("li",[t._v("分配内存时也就不用考虑有空间碎片的复杂情况")])]),t._v(" "),_("p",[t._v("主要缺点：")]),t._v(" "),_("ul",[_("li",[t._v("移动存活对象需要更新引用「Stop The World」")])]),t._v(" "),_("p",[t._v("关于移动对象的影响：")]),t._v(" "),_("ul",[_("li",[t._v("从延迟时间来看，不移动对象停顿时间会更短，甚至可以不需要停顿。")]),t._v(" "),_("li",[t._v("从整个程序的吞吐量来看，移动对象会更划算。")])]),t._v(" "),_("h3",{attrs:{id:"算法示意图"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#算法示意图"}},[t._v("#")]),t._v(" 算法示意图")]),t._v(" "),_("div",{attrs:{align:"center"}},[_("img",{attrs:{src:"https://blog-review-notes.oss-cn-beijing.aliyuncs.com/language/java-jvm/_images/垃圾收集算法.png"}})]),t._v(" "),_("h3",{attrs:{id:"算法总结与应用场景"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#算法总结与应用场景"}},[t._v("#")]),t._v(" 算法总结与应用场景")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",{staticStyle:{"text-align":"left"}}),t._v(" "),_("th",{staticStyle:{"text-align":"center"}},[t._v("标记-清除")]),t._v(" "),_("th",{staticStyle:{"text-align":"center"}},[t._v("标记-复制")]),t._v(" "),_("th",{staticStyle:{"text-align":"center"}},[t._v("标记-整理")])])]),t._v(" "),_("tbody",[_("tr",[_("td",{staticStyle:{"text-align":"left"}},[t._v("速度")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("中等")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("最快")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("最慢")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"left"}},[t._v("空间使用率")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("100%")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("50%")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("100%")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"left"}},[t._v("空间碎片")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("会")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("不会")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("不会")])]),t._v(" "),_("tr",[_("td",{staticStyle:{"text-align":"left"}},[t._v("移动对象")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("否")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("是")]),t._v(" "),_("td",{staticStyle:{"text-align":"center"}},[t._v("是")])])])]),t._v(" "),_("ul",[_("li",[_("p",[t._v("年轻代中的对象存活率较低，一般使用复制算法，因为其时间开销与存活对象的大小成正比，如果存活对象很少，它就非常快；而且年轻代本身应该比较小，就算需要 2 倍空间也只会浪费不太多的空间")])]),t._v(" "),_("li",[_("p",[t._v("老年代被对象存活率可能会很高，而且假定可用剩余空间不太多，这样复制算法就不太合适，于是更可能选用另两种算法，特别是不用移动对象的清除算法")])]),t._v(" "),_("li",[_("p",[t._v("无论哪种算法，内存碎片的问题需要解决，而且仅有「清除算法」会产生内存碎片")]),t._v(" "),_("ul",[_("li",[t._v("因此收集器可能会搭配其他的收集器来进行内存整理（CMS 搭配 Serial Old 进行 Full GC）")]),t._v(" "),_("li",[t._v("或者在 Full GC 时进行整理。HotSpot VM 的 Full GC 时使用整理算法实现（待完全确认）")])])])]),t._v(" "),_("blockquote",[_("p",[t._v("具体收集器使用算法以实际为主，该处只是做应用场景分析")])]),t._v(" "),_("h2",{attrs:{id:"总结"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#总结"}},[t._v("#")]),t._v(" 总结")]),t._v(" "),_("ul",[_("li",[_("p",[t._v("因为程序对象大多数时候朝生夕灭、少数情况越活越久、活的时间长的对活的时间短的依赖较少我们可以分代管理他们")])]),t._v(" "),_("li",[_("p",[t._v("针对不同的分代对象，我们可以使用不同的特征算法来收集")])]),t._v(" "),_("li",[_("p",[t._v("垃圾回收算法本身比较复杂，感兴趣的朋友可以深入研究")])])]),t._v(" "),_("blockquote",[_("p",[t._v("算法记忆的建议（d/c/s）：")]),t._v(" "),_("ul",[_("li",[t._v("标记-清除，find-delete")]),t._v(" "),_("li",[t._v("标记-复制，find-copy")]),t._v(" "),_("li",[t._v("标记-整理，find-sort")])])]),t._v(" "),_("h2",{attrs:{id:"参考"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),_("ul",[_("li",[t._v("《深入理解 Java 虚拟机：JVM 高级特性与最佳实践（第 3 版）》周志明 著")]),t._v(" "),_("li",[_("a",{attrs:{href:"https://www.zhihu.com/question/41922036",target:"_blank",rel:"noopener noreferrer"}},[t._v("Major GC 和 Full GC 的区别是什么？触发条件呢？R 的回答 "),_("OutboundLink")],1)]),t._v(" "),_("li",[_("a",{attrs:{href:"https://hllvm-group.iteye.com/group/topic/38223#post-248757",target:"_blank",rel:"noopener noreferrer"}},[t._v("并发垃圾收集器（CMS）为什么没有采用标记-整理算法来实现？R 的回答 "),_("OutboundLink")],1)])])])}),[],!1,null,null,null);v.default=a.exports}}]);