(window.webpackJsonp=window.webpackJsonp||[]).push([[137],{510:function(t,a,s){"use strict";s.r(a);var e=s(10),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("blockquote",[s("p",[t._v("专栏原创出处："),s("a",{attrs:{href:"https://github.com/GourdErwa/review-notes/tree/master/language/java-concurrency",target:"_blank",rel:"noopener noreferrer"}},[t._v("github-源笔记文件 "),s("OutboundLink")],1),t._v(" ，"),s("a",{attrs:{href:"https://github.com/GourdErwa/java-advanced/tree/master/java-concurrency",target:"_blank",rel:"noopener noreferrer"}},[t._v("github-源码 "),s("OutboundLink")],1),t._v("，欢迎 Star，转载请附上原文出处链接和本声明。")])]),t._v(" "),s("p",[t._v("Java 并发编程专栏系列笔记，系统性学习可访问个人复盘笔记-技术博客 "),s("a",{attrs:{href:"https://review-notes.top/language/java-concurrency/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java 并发编程"),s("OutboundLink")],1)]),t._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#executor-框架是什么"}},[t._v("Executor 框架是什么")])]),s("li",[s("a",{attrs:{href:"#executor-框架的两级调度模型"}},[t._v("Executor 框架的两级调度模型")])]),s("li",[s("a",{attrs:{href:"#executor-框架组成"}},[t._v("Executor 框架组成")]),s("ul",[s("li",[s("a",{attrs:{href:"#任务的执行核心类说明"}},[t._v("任务的执行核心类说明")])]),s("li",[s("a",{attrs:{href:"#任务提交与结果返回核心类说明"}},[t._v("任务提交与结果返回核心类说明")])])])]),s("li",[s("a",{attrs:{href:"#executors-工厂方法类说明"}},[t._v("Executors 工厂方法类说明")])]),s("li",[s("a",{attrs:{href:"#threadpoolexecutor-详解"}},[t._v("ThreadPoolExecutor 详解")]),s("ul",[s("li",[s("a",{attrs:{href:"#fixedthreadpool"}},[t._v("FixedThreadPool")])]),s("li",[s("a",{attrs:{href:"#singlethreadexecutor"}},[t._v("SingleThreadExecutor")])]),s("li",[s("a",{attrs:{href:"#cachedthreadpool"}},[t._v("CachedThreadPool")])])])]),s("li",[s("a",{attrs:{href:"#scheduledthreadpoolexecutor-详解"}},[t._v("ScheduledThreadPoolExecutor 详解")]),s("ul",[s("li",[s("a",{attrs:{href:"#scheduledthreadpoolexecutor-如何获取执行任务"}},[t._v("ScheduledThreadPoolExecutor 如何获取执行任务")])]),s("li",[s("a",{attrs:{href:"#scheduledthreadpoolexecutor-与-threadpoolexecutor-比较"}},[t._v("ScheduledThreadPoolExecutor 与 ThreadPoolExecutor 比较")])])])]),s("li",[s("a",{attrs:{href:"#futuretask-详解"}},[t._v("FutureTask 详解")]),s("ul",[s("li",[s("a",{attrs:{href:"#futuretask-的状态转换"}},[t._v("FutureTask 的状态转换")])]),s("li",[s("a",{attrs:{href:"#futuretask-的实现"}},[t._v("FutureTask 的实现")])])])]),s("li",[s("a",{attrs:{href:"#总结思考"}},[t._v("总结思考")])]),s("li",[s("a",{attrs:{href:"#参考"}},[t._v("参考")])])])]),s("p"),t._v(" "),s("h2",{attrs:{id:"executor-框架是什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#executor-框架是什么"}},[t._v("#")]),t._v(" Executor 框架是什么")]),t._v(" "),s("p",[t._v("Java 线程的创建与销毁需要一定的开销，因此为每一个任务创建一个新线程来执行，线程的创建与开销将浪费大量计算资源。而且，如果不对创建线程的数量做限制，可能会导致系统负荷太高而崩溃。")]),t._v(" "),s("p",[t._v("Java 的线程既是工作单元，也是执行机制。JDK1.5 之后，工作单元与执行机制分离，工作单元包括 Runnable 和 Callable，执行机制由 Executor 框架负责。")]),t._v(" "),s("h2",{attrs:{id:"executor-框架的两级调度模型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#executor-框架的两级调度模型"}},[t._v("#")]),t._v(" Executor 框架的两级调度模型")]),t._v(" "),s("p",[t._v("在 HotSpot VM 的线程模型中，Java 线程被一对一映射为本地操作系统线程。")]),t._v(" "),s("ul",[s("li",[t._v("Java 线程启动时会创建一个本地操作系统线程。")]),t._v(" "),s("li",[t._v("当该 Java 线程终止时，这个操作系统线程也会被回收。操作系统会调度所有线程并将它们分配给可用的 CPU。")])]),t._v(" "),s("hr"),t._v(" "),s("p",[t._v("两级调度模型描述为：")]),t._v(" "),s("ul",[s("li",[t._v("在上层，Java 多线程程序通常把应用分解为若干个任务，然后使用用户级的调度器 (Executor 框架) 将这些任务映射为固定数量的线程;")]),t._v(" "),s("li",[t._v("在底层，操作系统内核将这些线程映射到硬件处理器上。")])]),t._v(" "),s("h2",{attrs:{id:"executor-框架组成"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#executor-框架组成"}},[t._v("#")]),t._v(" Executor 框架组成")]),t._v(" "),s("p",[t._v("Executor 框架主要由 3 大部分组成如下：")]),t._v(" "),s("ol",[s("li",[s("strong",[t._v("任务的提交")]),t._v("：包括被执行任务需要实现的接口:Runnable 接口或 Callable 接口。")]),t._v(" "),s("li",[s("strong",[t._v("任务的执行")]),t._v("：包括任务执行机制的核心接口 Executor，以及继承自 Executor 的 ExecutorService 接口。Executor 框架有两个关键类实现了 ExecutorService 接口 (ThreadPoolExecutor 和 ScheduledThreadPoolExecutor)。")]),t._v(" "),s("li",[s("strong",[t._v("任务的结果")]),t._v("：异步计算的结果，包括接口 Future 和实现 Future 接口的 FutureTask 类。")])]),t._v(" "),s("h3",{attrs:{id:"任务的执行核心类说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#任务的执行核心类说明"}},[t._v("#")]),t._v(" 任务的执行核心类说明")]),t._v(" "),s("p",[t._v("任务的执行，核心接口 Executor 一些基础类类图：\n")]),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://blog-review-notes.oss-cn-beijing.aliyuncs.com/language/java-concurrency/_images/类图关系-Executor.png"}})]),s("p"),t._v(" "),s("p",[t._v("下面是这些类和接口的简介：")]),t._v(" "),s("ul",[s("li",[t._v("Executor : 是一个接口，它是 Executor 框架的基础，它将任务的提交与任务的执行分离开")]),t._v(" "),s("li",[t._v("ExecutorService : 继承 Executor 接口，提供了任务的提交和停止的方法")]),t._v(" "),s("li",[t._v("AbstractExecutorService : 是 ExecutorService 的抽象实现")]),t._v(" "),s("li",[t._v("ThreadPoolExecutor : 是 AbstractExecutorService 的核心实现类，用来执行被提交的任务")]),t._v(" "),s("li",[t._v("ScheduledExecutorService ： 继承 ExecutorService 接口，额外提供了可以在给定的延迟后运行命令，或者定期执行命令的 schedule 方法")]),t._v(" "),s("li",[t._v("ScheduledThreadPoolExecutor : 是 ScheduledExecutorService 的核心实现类，它比 Timer 更灵活，功能更强大")]),t._v(" "),s("li",[t._v("ForkJoinPool : 支持将一个任务拆分成多个“小任务”并行计算，再把多个“小任务”的结果合并成总的计算结果")])]),t._v(" "),s("h3",{attrs:{id:"任务提交与结果返回核心类说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#任务提交与结果返回核心类说明"}},[t._v("#")]),t._v(" 任务提交与结果返回核心类说明")]),t._v(" "),s("p",[t._v("任务的提交"),s("code",[t._v("Runnable 接口或 Callable 接口")]),t._v("与任务的结果 "),s("code",[t._v("Future 接口")]),t._v("关系图：\n")]),s("div",{attrs:{align:"center"}},[s("img",{attrs:{src:"https://blog-review-notes.oss-cn-beijing.aliyuncs.com/language/java-concurrency/_images/类图关系-Future.png"}}),t._v(" "),s("p",[t._v(" 类图关系-Future ")])]),s("p"),t._v(" "),s("p",[t._v("下面是这些类和接口的简介：")]),t._v(" "),s("ul",[s("li",[t._v("Runnable 接口: 任务方法无返回结果，可以被 ExecutorService 接口执行。")]),t._v(" "),s("li",[t._v("Callable 接口: 任务方法有返回结果，可以被 ExecutorService 接口执行。")]),t._v(" "),s("li",[t._v("Future 接口: 实现类代表异步计算的结果。\n"),s("ul",[s("li",[t._v("FutureTask 代表异步计算的结果")]),t._v(" "),s("li",[t._v("ScheduledFutureTask 代表异步计算的结果，提供了"),s("code",[t._v("getDelay")]),t._v("任务剩余的延迟时间、"),s("code",[t._v("isPeriodic")]),t._v("任务是否为周期性任务")])])])]),t._v(" "),s("h2",{attrs:{id:"executors-工厂方法类说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#executors-工厂方法类说明"}},[t._v("#")]),t._v(" Executors 工厂方法类说明")]),t._v(" "),s("p",[t._v("Executors 是一个静态的工厂方法类，提供快速创建线程池等操作。")]),t._v(" "),s("ul",[s("li",[t._v("new XX 方法，使用常用的配置设置创建 ExecutorService\n"),s("ul",[s("li",[t._v("newFixedThreadPool-固定线程数的线程池")]),t._v(" "),s("li",[t._v("newSingleThreadExecutor-单个线程的线程池")]),t._v(" "),s("li",[t._v("newCachedThreadPool-根据需要创建新线程的线程池")])])]),t._v(" "),s("li",[t._v("new XX 方法，使用常用的配置设置创建 ScheduledExecutorService\n"),s("ul",[s("li",[t._v("newScheduledThreadPool-ScheduledExecutorService")]),t._v(" "),s("li",[t._v("newSingleThreadScheduledExecutor-单个线程的 ScheduledExecutorService")])])]),t._v(" "),s("li",[t._v("unconfigurableXX 方法，包装一个不可配置的线程池\n"),s("ul",[s("li",[t._v("unconfigurableExecutorService")]),t._v(" "),s("li",[t._v("unconfigurableScheduledExecutorService")])])])]),t._v(" "),s("blockquote",[s("p",[t._v("以下关于各类线程池的创建无特殊说明，创建方法都是指 Executors 中的静态方法")])]),t._v(" "),s("h2",{attrs:{id:"threadpoolexecutor-详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#threadpoolexecutor-详解"}},[t._v("#")]),t._v(" ThreadPoolExecutor 详解")]),t._v(" "),s("h3",{attrs:{id:"fixedthreadpool"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#fixedthreadpool"}},[t._v("#")]),t._v(" FixedThreadPool")]),t._v(" "),s("p",[t._v("FixedThreadPool 被称为可重用固定线程数的线程池。Executors 提供的静态创建方法如下：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorService")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("newFixedThreadPool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" nThreads"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nThreads"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nThreads"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                      "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0L")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MILLISECONDS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedBlockingQueue")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"参数设置说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参数设置说明"}},[t._v("#")]),t._v(" 参数设置说明")]),t._v(" "),s("ul",[s("li",[t._v("corePoolSize 和 maximumPoolSize 都被设置为创建 FixedThreadPool 时指定的参数 nThreads。"),s("br"),t._v("\n当线程池中的线程数大于 corePoolSize 时，keepAliveTime 为多余的空闲线程等待新任务的最长时间，超过这个时间后多余的线程将被终止。")]),t._v(" "),s("li",[t._v("keepAliveTime 设置为 0L，意味着多余的空闲线程会被立即终止。")]),t._v(" "),s("li",[t._v("FixedThreadPool 使用无界队列 LinkedBlockingQueue 作为线程池的工作队列（队列的容量为 Integer.MAX_VALUE）。")])]),t._v(" "),s("h4",{attrs:{id:"优缺点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优缺点"}},[t._v("#")]),t._v(" 优缺点")]),t._v(" "),s("ul",[s("li",[t._v("优点是多任务并行运行，最大并行运行线程数量是固定的")]),t._v(" "),s("li",[t._v("优点是能够保证所有的任务都被执行，永远不会拒绝新的任务")]),t._v(" "),s("li",[t._v("缺点是队列数量没有限制，在任务执行时间无限延长的这种极端情况下会造成内存问题")])]),t._v(" "),s("h4",{attrs:{id:"使用无界队列作带来的影响"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#使用无界队列作带来的影响"}},[t._v("#")]),t._v(" 使用无界队列作带来的影响")]),t._v(" "),s("ol",[s("li",[t._v("当线程池中的线程数达到 corePoolSize 后，新任务将在无界队列中等待，因此线程池中的线程数不会超过 corePoolSize。")]),t._v(" "),s("li",[t._v("由于 1，使用无界队列时 maximumPoolSize 将是一个无效参数。")]),t._v(" "),s("li",[t._v("由于 1 和 2，使用无界队列时 keepAliveTime 将是一个无效参数。")]),t._v(" "),s("li",[t._v("由于使用无界队列，运行中的 FixedThreadPool（未执行方法 shutdown 或 shutdownNow）不会拒绝任务（不会调用 RejectedExecutionHandler.rejectedExecution 方法）。")])]),t._v(" "),s("h3",{attrs:{id:"singlethreadexecutor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#singlethreadexecutor"}},[t._v("#")]),t._v(" SingleThreadExecutor")]),t._v(" "),s("p",[t._v("SingleThreadExecutor 是使用单个线程的线程池。Executors 提供的静态创建方法如下：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorService")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("newSingleThreadExecutor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadFactory")]),t._v(" threadFactory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FinalizableDelegatedExecutorService")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                    "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0L")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MILLISECONDS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedBlockingQueue")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                    threadFactory"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"参数设置及影响说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参数设置及影响说明"}},[t._v("#")]),t._v(" 参数设置及影响说明")]),t._v(" "),s("ul",[s("li",[t._v("corePoolSize 和 maximumPoolSize 被设置为 1。其他参数与 FixedThreadPool 相同。")]),t._v(" "),s("li",[t._v("使用无界队列 LinkedBlockingQueue 作为线程池的工作队列（队列的容量为 Integer.MAX_VALUE）。")])]),t._v(" "),s("blockquote",[s("p",[t._v("SingleThreadExecutor 使用无界队列作为工作队列对线程池带来的影响与 FixedThreadPool 相同。")])]),t._v(" "),s("h4",{attrs:{id:"优缺点-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优缺点-2"}},[t._v("#")]),t._v(" 优缺点")]),t._v(" "),s("ul",[s("li",[t._v("优点是适用于在逻辑上需要单线程处理任务的场景，最大并行运行线程数量固定为1")]),t._v(" "),s("li",[t._v("优点是能够保证所有的任务都被执行，永远不会拒绝新的任务")]),t._v(" "),s("li",[t._v("缺点是队列数量没有限制，在任务执行时间无限延长的这种极端情况下会造成内存问题")])]),t._v(" "),s("h3",{attrs:{id:"cachedthreadpool"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#cachedthreadpool"}},[t._v("#")]),t._v(" CachedThreadPool")]),t._v(" "),s("p",[t._v("CachedThreadPool 是一个会根据需要创建新线程的线程池。Executors 提供的静态创建方法如下：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutorService")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("newCachedThreadPool")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ThreadPoolExecutor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MAX_VALUE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                      "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("60L")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TimeUnit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("SECONDS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                      "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("SynchronousQueue")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Runnable")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h4",{attrs:{id:"参数设置及影响说明-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参数设置及影响说明-2"}},[t._v("#")]),t._v(" 参数设置及影响说明")]),t._v(" "),s("ul",[s("li",[t._v("corePoolSize 被设置为 0，即 corePool 为空；")]),t._v(" "),s("li",[t._v("maximumPoolSize 被设置为 Integer.MAX_VALUE，即 maximumPool 是无界的。")]),t._v(" "),s("li",[t._v("keepAliveTime 设置为 60L，意味着 CachedThreadPool 中的空闲线程等待新任务的最长时间为 60 秒，空闲线程超过 60 秒后将会被 终止。")]),t._v(" "),s("li",[t._v("SynchronousQueue 是一个没有容量的阻塞队列。每个插入操作必须等待另一个线程的对应移除操作，反之亦然。")]),t._v(" "),s("li",[t._v("CachedThreadPool 使用 SynchronousQueue，把主线程提交的任务传递给空闲线程执行。")])]),t._v(" "),s("blockquote",[s("p",[t._v("FixedThreadPool 和 SingleThreadExecutor 使用无界队列 LinkedBlockingQueue 作为线程池的工作队列。"),s("br"),t._v("\nCachedThreadPool 使用没有容量的 SynchronousQueue 作为线程池的工作队列，但 CachedThreadPool 的 maximumPool 是无界的。\n这意味着，如果主线程提交任务的速度高于 maximumPool 中线程处理任务的速度时，CachedThreadPool 会不断创建新线程。极端情况下，CachedThreadPool 会因为创建过多线程而耗尽 CPU 和内存资源。")])]),t._v(" "),s("h4",{attrs:{id:"优缺点-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#优缺点-3"}},[t._v("#")]),t._v(" 优缺点")]),t._v(" "),s("ul",[s("li",[t._v("优点是多任务并行运行，最大并行运行线程数量是不固定的，随着新任务到达可持续创建新的线程")]),t._v(" "),s("li",[t._v("优点是能够保证所有的任务都被执行，永远不会拒绝新的任务")]),t._v(" "),s("li",[t._v("缺点是极端情况下，处理速度小于任务提交速度时，会因为创建过多线程而耗尽 CPU 和内存资源")])]),t._v(" "),s("h2",{attrs:{id:"scheduledthreadpoolexecutor-详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scheduledthreadpoolexecutor-详解"}},[t._v("#")]),t._v(" ScheduledThreadPoolExecutor 详解")]),t._v(" "),s("p",[t._v("ScheduledThreadPoolExecutor 继承自 ThreadPoolExecutor。它主要用来在给定的延迟之后运行任务，或者定期执行任务。")]),t._v(" "),s("blockquote",[s("p",[t._v("ScheduledThreadPoolExecutor 的功能与 Timer 类似，但 ScheduledThreadPoolExecutor 功能更强大、更灵活。Timer 对应的是单个后台线程，而 ScheduledThreadPoolExecutor 可以在构造函数中指定多个对应的后台线程数。")])]),t._v(" "),s("p",[t._v("Executors 提供的静态创建方法如下：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ScheduledThreadPoolExecutor")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" corePoolSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("corePoolSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MAX_VALUE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" \n              "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" NANOSECONDS"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n              "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DelayedWorkQueue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("DelayQueue 是一个无界队列，所以 maximumPoolSize 在 ScheduledThreadPoolExecutor 中没有什么意义（设置 maximumPoolSize 的大小没有什么效果）。")]),t._v(" "),s("p",[t._v("ScheduledThreadPoolExecutor 的执行主要分为两大部分:")]),t._v(" "),s("ol",[s("li",[t._v("当调用 scheduleAtFixedRate 方法或者 scheduleWithFixedDelay 方法时，会向 DelayQueue 添加一个实现了 RunnableScheduledFuture 接口的 ScheduledFutureTask。")]),t._v(" "),s("li",[t._v("线程池中的线程从 DelayQueue 中获取 ScheduledFutureTask，然后执行任务。")])]),t._v(" "),s("h3",{attrs:{id:"scheduledthreadpoolexecutor-如何获取执行任务"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scheduledthreadpoolexecutor-如何获取执行任务"}},[t._v("#")]),t._v(" ScheduledThreadPoolExecutor 如何获取执行任务")]),t._v(" "),s("p",[t._v("ScheduledFutureTask 主要包含 3 个成员变量，如下：")]),t._v(" "),s("ul",[s("li",[t._v("long 型成员变量 time，表示这个任务将要被执行的具体时间。")]),t._v(" "),s("li",[t._v("long 型成员变量 sequenceNumber，表示这个任务被添加到 ScheduledThreadPoolExecutor 中的序号。")]),t._v(" "),s("li",[t._v("long 型成员变量 period，表示任务执行的间隔周期。")])]),t._v(" "),s("p",[t._v("DelayQueue 封装了一个 PriorityQueue，这个 PriorityQueue 会对队列中的 ScheduledFutureTask 进行排序。\n排序时，time 小的排在前面（时间早的任务将被先执行）。\n如果两个 ScheduledFutureTask 的 time 相同，就比较 sequenceNumber，sequenceNumber 小的排在前面（也就是说，如果两个任务的执行时间相同，那么先提交的任务将被先执行）")]),t._v(" "),s("h3",{attrs:{id:"scheduledthreadpoolexecutor-与-threadpoolexecutor-比较"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scheduledthreadpoolexecutor-与-threadpoolexecutor-比较"}},[t._v("#")]),t._v(" ScheduledThreadPoolExecutor 与 ThreadPoolExecutor 比较")]),t._v(" "),s("p",[t._v("ScheduledThreadPoolExecutor 为了实现周期性的执行任务，对 ThreadPoolExecutor 做了如下的修改。")]),t._v(" "),s("ul",[s("li",[t._v("使用 DelayQueue 作为任务队列。")]),t._v(" "),s("li",[t._v("获取任务的方式不同。")]),t._v(" "),s("li",[t._v("执行周期任务后，增加了额外的处理。")])]),t._v(" "),s("h2",{attrs:{id:"futuretask-详解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#futuretask-详解"}},[t._v("#")]),t._v(" FutureTask 详解")]),t._v(" "),s("h3",{attrs:{id:"futuretask-的状态转换"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#futuretask-的状态转换"}},[t._v("#")]),t._v(" FutureTask 的状态转换")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" NEW          "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//新建")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" COMPLETING   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//完成")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" NORMAL       "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//正常")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" EXCEPTIONAL  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//异常")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" CANCELLED    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//取消")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" INTERRUPTING "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//中断中")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" INTERRUPTED  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//中断")]),t._v("\n")])])]),s("p",[t._v("可能的状态转换:")]),t._v(" "),s("ul",[s("li",[t._v("新建-> 完成-> 正常")]),t._v(" "),s("li",[t._v("新建-> 完成-> 异常")]),t._v(" "),s("li",[t._v("新建-> 取消")]),t._v(" "),s("li",[t._v("新建-> 中断中-> 中断")])]),t._v(" "),s("h3",{attrs:{id:"futuretask-的实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#futuretask-的实现"}},[t._v("#")]),t._v(" FutureTask 的实现")]),t._v(" "),s("h4",{attrs:{id:"futuretask-get-方法执行过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#futuretask-get-方法执行过程"}},[t._v("#")]),t._v(" FutureTask.get 方法执行过程")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ExecutionException")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" COMPLETING"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n         s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("awaitDone")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0L")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("report")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("awaitDone")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" timed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" nanos"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throws")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 计算等待截止时间")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("long")]),t._v(" deadline "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" timed "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("nanoTime")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" nanos "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0L")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WaitNode")]),t._v(" q "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" queued "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. 判断阻塞线程是否被中断,如果被中断则在等待队")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 列中删除该节点并抛出 InterruptedException 异常")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("interrupted")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeWaiter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("InterruptedException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n \n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2. 获取当前状态，如果状态大于 COMPLETING")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 说明任务已经结束 (要么正常结束，要么异常结束，要么被取消)")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 则把 thread 显示置空，并返回结果")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" COMPLETING"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("thread "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3. 如果状态处于中间状态 COMPLETING")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 表示任务已经结束但是任务执行线程还没来得及给 outcome 赋值")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这个时候让出执行权让其他线程优先执行")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" COMPLETING"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// cannot time out yet")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("yield")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4. 如果等待节点为空，则构造一个等待节点")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            q "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("WaitNode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 5. 如果还没有入队列，则把当前节点加入 waiters 首节点并替换原来 waiters")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("queued"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            queued "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" UNSAFE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareAndSwapObject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" waitersOffset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                    q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" waiters"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("timed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果需要等待特定时间，则先计算要等待的时间")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果已经超时，则删除对应节点并返回对应的状态")]),t._v("\n            nanos "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" deadline "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("nanoTime")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nanos "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0L")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeWaiter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("q"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 6. 阻塞等待特定时间")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LockSupport")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("parkNanos")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" nanos"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 6. 阻塞等待直到被其他线程唤醒")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LockSupport")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("park")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("get 方法源码解析：")]),t._v(" "),s("ul",[s("li",[t._v("判断任务当前的 state <= COMPLETING 是否成立。前面分析过，COMPLETING 状态是任务是否执行完成的临界状态。")]),t._v(" "),s("li",[t._v("如果成立，表明任务还没有结束 (这里的结束包括任务正常执行完毕，任务执行异常，任务被取消)，则会调用 awaitDone 进行阻塞等待。")]),t._v(" "),s("li",[t._v("如果不成立表明任务已经结束，调用 report 返回结果。")])]),t._v(" "),s("p",[t._v("awaitDone 方法源码解析：\nawaitDone 中有个死循环，每一次循环都会：")]),t._v(" "),s("ol",[s("li",[t._v("判断调用 get 的线程是否被其他线程中断，如果是的话则在等待队列中删除对应节点然后抛出 InterruptedException 异常。")]),t._v(" "),s("li",[t._v("获取任务当前状态，如果当前任务状态大于 COMPLETING 则表示任务执行完成，则把 thread 字段置 null 并返回结果。")]),t._v(" "),s("li",[t._v("如果任务处于 COMPLETING 状态，则表示任务已经处理完成 (正常执行完成或者执行出现异常)，但是执行结果或者异常原因还没有保存到 outcome 字段中。这个时候调用线程让出执行权让其他线程优先执行。")]),t._v(" "),s("li",[t._v("如果等待节点为空，则构造一个等待节点 WaitNode。")]),t._v(" "),s("li",[t._v("如果第四步中新建的节点还没如队列，则 CAS 的把该节点加入 waiters 队列的首节点。")]),t._v(" "),s("li",[t._v("阻塞等待。")])]),t._v(" "),s("p",[t._v("假设当前 state=NEW 且 waiters 为 NULL,也就是说还没有任何一个线程调用 get 获取执行结果，这个时候有两个线程 threadA 和 threadB 先后调用 get 来获取执行结果。再假设这两个线程在加入阻塞队列进行阻塞等待之前任务都没有执行完成且 threadA 和 threadB 都没有被中断的情况下 (因为如果 threadA 和 threadB 在进行阻塞等待结果之前任务就执行完成或线程本身被中断的话，awaitDone 就执行结束返回了)，执行过程是这样的，以 threadA 为例:")]),t._v(" "),s("ul",[s("li",[t._v("第一轮 for 循环，执行的逻辑是 q == null,所以这时候会新建一个节点 q。第一轮循环结束。")]),t._v(" "),s("li",[t._v("第二轮 for 循环，执行的逻辑是!queue，这个时候会把第一轮循环中生成的节点的 next 指针指向 waiters，然后 CAS 的把节点 q 替换 waiters。也就是把新生成的节点添加到 waiters 链表的首节点。如果替换成功，queued=true。第二轮循环结束。")]),t._v(" "),s("li",[t._v("第三轮 for 循环，进行阻塞等待。要么阻塞特定时间，要么一直阻塞知道被其他线程唤醒。")])]),t._v(" "),s("h4",{attrs:{id:"futuretask-run-方法执行过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#futuretask-run-方法执行过程"}},[t._v("#")]),t._v(" FutureTask.run 方法执行过程")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("run")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 1. 状态如果不是 NEW，说明任务或者已经执行过，或者已经被取消，直接返回")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 2. 状态如果是 NEW，则尝试把当前执行线程保存在 runner 字段中")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果赋值失败则直接返回")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("state "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" NEW "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("UNSAFE"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("compareAndSwapObject")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" runnerOffset"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                                     "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Thread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("currentThread")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Callable")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" callable"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("c "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" state "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" NEW"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" ran"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 3. 执行任务")]),t._v("\n                result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" c"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("call")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                ran "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Throwable")]),t._v(" ex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                ran "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4. 任务异常")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("setException")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ex"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ran"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 4. 任务正常执行完毕")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// runner must be non-null until state is settled to")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// prevent concurrent calls to run()")]),t._v("\n        runner "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// state must be re-read after nulling runner to prevent")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// leaked interrupts")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 5. 如果任务被中断，执行中断处理")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" INTERRUPTING"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("handlePossibleCancellationInterrupt")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ol",[s("li",[t._v("判断当前任务的 state 是否等于 NEW,如果不为 NEW 则说明任务或者已经执行过，或者已经被取消，直接返回。")]),t._v(" "),s("li",[t._v("如果状态为 NEW 则接着会通过 unsafe 类把任务执行线程引用 CAS 的保存在 runner 字段中，如果保存失败，则直接返回。")]),t._v(" "),s("li",[t._v("执行任务。")]),t._v(" "),s("li",[t._v("如果任务执行发生异常，则调用 setException 方法保存异常信息")])]),t._v(" "),s("h2",{attrs:{id:"总结思考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#总结思考"}},[t._v("#")]),t._v(" 总结思考")]),t._v(" "),s("ul",[s("li",[t._v("Executor 是什么，实现类有什么")]),t._v(" "),s("li",[t._v("Executor 如何创建？")]),t._v(" "),s("li",[t._v("Executors 静态方法提供的线程池类型有哪些，默认参数是什么？")]),t._v(" "),s("li",[t._v("支持定期或周期任务和一般的 Executor 有什么区别？")]),t._v(" "),s("li",[t._v("ScheduledThreadPoolExecutor 如何获取待执行的任务？")]),t._v(" "),s("li",[t._v("FutureTask 的运行、取消、获取操作实现原理")])]),t._v(" "),s("h2",{attrs:{id:"参考"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),s("ul",[s("li",[t._v("并发编程的艺术")]),t._v(" "),s("li",[s("a",{attrs:{href:"https://www.cnblogs.com/linghu-java/p/8991824.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("FutureTask 源码解析 "),s("OutboundLink")],1)])])])}),[],!1,null,null,null);a.default=n.exports}}]);