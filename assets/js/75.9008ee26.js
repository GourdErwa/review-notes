(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{447:function(t,n,s){"use strict";s.r(n);var a=s(10),e=Object(a.a)({},(function(){var t=this,n=t.$createElement,s=t._self._c||n;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("blockquote",[s("p",[t._v("专栏原创出处："),s("a",{attrs:{href:"https://github.com/GourdErwa/review-notes/tree/master/framework/flink-basis",target:"_blank",rel:"noopener noreferrer"}},[t._v("github-源笔记文件 "),s("OutboundLink")],1),t._v(" ，"),s("a",{attrs:{href:"https://github.com/GourdErwa/flink-advanced",target:"_blank",rel:"noopener noreferrer"}},[t._v("github-源码 "),s("OutboundLink")],1),t._v("，欢迎 Star，转载请附上原文出处链接和本声明。\n本节内容对应"),s("a",{attrs:{href:"https://ci.apache.org/projects/flink/flink-docs-release-1.9/dev/stream/operators/windows.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("官方文档 "),s("OutboundLink")],1),t._v("，本节内容对应"),s("a",{attrs:{href:"https://github.com/GourdErwa/flink-advanced/blob/master/src/main/scala/io/gourd/flink/scala/games/streaming/operators/windows/",target:"_blank",rel:"noopener noreferrer"}},[t._v("示例源码 "),s("OutboundLink")],1)])]),t._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#_1-windows-窗口"}},[t._v("1 Windows（窗口）")]),s("ul",[s("li",[s("a",{attrs:{href:"#_1-1-keyed-windows"}},[t._v("1.1 Keyed Windows")])]),s("li",[s("a",{attrs:{href:"#_1-2-non-keyed-windows"}},[t._v("1.2 Non-Keyed Windows")])])])]),s("li",[s("a",{attrs:{href:"#_2-窗口生命周期"}},[t._v("2 窗口生命周期")])]),s("li",[s("a",{attrs:{href:"#_3-窗口类型"}},[t._v("3 窗口类型")]),s("ul",[s("li",[s("a",{attrs:{href:"#_3-1-滚动窗户-tumbling-windows"}},[t._v("3.1 滚动窗户 (Tumbling Windows)")])]),s("li",[s("a",{attrs:{href:"#_3-2-滑动窗-sliding-windows"}},[t._v("3.2 滑动窗 (Sliding Windows)")])]),s("li",[s("a",{attrs:{href:"#_3-3-会话窗口-session-windows"}},[t._v("3.3 会话窗口 (Session Windows)")])]),s("li",[s("a",{attrs:{href:"#_3-4-全局窗口-global-windows"}},[t._v("3.4 全局窗口 (Global Windows)")])])])]),s("li",[s("a",{attrs:{href:"#_4-触发器-trigger"}},[t._v("4 触发器 (Trigger)")]),s("ul",[s("li",[s("a",{attrs:{href:"#_4-1-触发器结果"}},[t._v("4.1 触发器结果")])]),s("li",[s("a",{attrs:{href:"#_4-2-windowassigners-的默认触发器"}},[t._v("4.2 WindowAssigners 的默认触发器")])]),s("li",[s("a",{attrs:{href:"#_4-3-flink-内置和自定义触发器"}},[t._v("4.3 Flink 内置和自定义触发器")])])])]),s("li",[s("a",{attrs:{href:"#_5-驱逐器-evictor"}},[t._v("5 驱逐器 (Evictor)")])]),s("li",[s("a",{attrs:{href:"#_6-允许延迟-allowed-lateness"}},[t._v("6 允许延迟 (Allowed Lateness)")])])])]),s("p"),t._v(" "),s("h2",{attrs:{id:"_1-windows-窗口"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-windows-窗口"}},[t._v("#")]),t._v(" 1 Windows（窗口）")]),t._v(" "),s("p",[t._v("Windows 是处理无限流的核心。Windows 将流分成有限大小的"),s("strong",[t._v("buckets")]),t._v("，我们可以在其上应用计算。\n "),s("br"),t._v('\nFlink 支持两种"功能性"窗口"')]),t._v(" "),s("ol",[s("li",[t._v("数据按 key 分组后转换为"),s("code",[t._v("KeyedStream")]),t._v("分配的窗口为"),s("code",[t._v("WindowedStream")])]),t._v(" "),s("li",[t._v("数据未按 key 分组时，"),s("code",[t._v("DataStream")]),t._v("分配的窗口为"),s("code",[t._v("AllWindowedStream")])])]),t._v(" "),s("p",[t._v("以口语形象整体描述本章内容知识点，方便快速阅读理解，以"),s("code",[t._v("WindowedStream")]),t._v("为例。")]),t._v(" "),s("blockquote",[s("p",[t._v("初次接触比较难以快速理解以上概念，我们可以整体阅读文章内容后回头再理解该描述，从整体角度理解 window 一系列操作以及每个操作的意义。")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("stream\n       .keyBy(...)               <-  返回:KeyedStream\n       .window(...)              <-  必选:窗口分配，根据实际业务指定具体窗口\n      [.trigger(...)]            <-  选填:触发器，告诉窗口什么时候可以执行窗口函数（默认为默认实现）\n      [.evictor(...)]            <-  可选:驱逐器，触发器触发后，在窗口函数执行前/后对数据操作（默认无）\n      [.allowedLateness(...)]    <-  可选:指定允许延迟事件（默认为 0）\n      [.sideOutputLateData(...)] <-  可选:指定延迟事件的侧输出（默认无）\n       .reduce/aggregate/fold/apply()      <-  必填:窗口函数，定义窗口的数据如何计算\n      [.getSideOutput(...)]      <-  可选:DataStream.getSideOutput() 获取侧输出\n")])])]),s("p",[s("a",{attrs:{href:"https://github.com/GourdErwa/flink-advanced/blob/master/src/main/scala/io/gourd/flink/scala/games/streaming/operators/windows/KeyedWindowCompleteExample.scala",target:"_blank",rel:"noopener noreferrer"}},[t._v("简单示例代码-KeyedWindowCompleteExample"),s("OutboundLink")],1),t._v(" ：")]),t._v(" "),s("div",{staticClass:"language-scala extra-class"},[s("pre",{pre:!0,attrs:{class:"language-scala"}},[s("code",[t._v("  sEnv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("setStreamTimeCharacteristic"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TimeCharacteristic"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("EventTime"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" lateOutputTag "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" OutputTag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Double")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"late-data"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" GameData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DataStream"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rolePay"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// .filter(_.uid == "1|1051") // 过滤演示数据')]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("assignAscendingTimestamps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("eventTimestamp"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 指定 event-time")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("map"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("platform"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dataUnix"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("money"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("keyBy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_1"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 按平台字段分组")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TumblingEventTimeWindows"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("of"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("milliseconds"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 窗口定义: 按 event-time 设置 10ms 的滚动窗口")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("trigger"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CountTrigger"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("of"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 触发器：窗口内数据数量 ≥ N 时触发 max 计算")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("evictor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("CountEvictor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("of"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1000")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 驱逐器：触发器触发后，窗口内数据量 ≥ N 时，默认从开始位置移除，最大仅保留 N 条")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("allowedLateness"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("milliseconds"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 允许延迟为 N ms")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sideOutputLateData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lateOutputTag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 延迟的事件输出到指定标记中")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("max"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 窗口函数：max 聚合函数计算")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" lateStream "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getSideOutput"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lateOutputTag"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  lateStream"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("print"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"lateStream"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  result"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("print"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"normalStream"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  sEnv"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("execute"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getClass"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("getName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"_1-1-keyed-windows"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-keyed-windows"}},[t._v("#")]),t._v(" 1.1 Keyed Windows")]),t._v(" "),s("p",[s("code",[t._v("keyBy(...).window(...) call for the keyed streams")])]),t._v(" "),s("blockquote",[s("p",[t._v("拥有"),s("code",[t._v("keyed streams")]),t._v("将使窗口化计算可以由多个任务"),s("strong",[t._v("并行执行")]),t._v("，因为每个逻辑"),s("code",[t._v("keyed streams")]),t._v("都可以独立于其余逻辑流进行处理。引用同一键的所有元素将被发送到同一并行任务。")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('stream\n       .keyBy(...)               <-  keyed versus non-keyed windows\n       .window(...)              <-  required: "assigner"\n      [.trigger(...)]            <-  optional: "trigger" (else default trigger)\n      [.evictor(...)]            <-  optional: "evictor" (else no evictor)\n      [.allowedLateness(...)]    <-  optional: "lateness" (else zero)\n      [.sideOutputLateData(...)] <-  optional: "output tag" (else no side output for late data)\n       .reduce/aggregate/fold/apply()      <-  required: "function"\n      [.getSideOutput(...)]      <-  optional: "output tag"\n')])])]),s("h3",{attrs:{id:"_1-2-non-keyed-windows"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-non-keyed-windows"}},[t._v("#")]),t._v(" 1.2 Non-Keyed Windows")]),t._v(" "),s("p",[s("code",[t._v("windowAll(...) for non-keyed streams")])]),t._v(" "),s("blockquote",[s("p",[t._v("原始流将不会拆分为多个逻辑流，并且所有窗口逻辑将由单个任务执行，即并行度为 1")])]),t._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v('stream\n       .windowAll(...)           <-  required: "assigner"\n      [.trigger(...)]            <-  optional: "trigger" (else default trigger)\n      [.evictor(...)]            <-  optional: "evictor" (else no evictor)\n      [.allowedLateness(...)]    <-  optional: "lateness" (else zero)\n      [.sideOutputLateData(...)] <-  optional: "output tag" (else no side output for late data)\n       .reduce/aggregate/fold/apply()      <-  required: "function"\n      [.getSideOutput(...)]      <-  optional: "output tag"\n')])])]),s("blockquote",[s("p",[t._v("在上面，方括号（"),s("code",[t._v("[…]")]),t._v("）中的命令是可选的。Flink 允许您以多种不同方式自定义窗口逻辑，满足各种需求")])]),t._v(" "),s("h2",{attrs:{id:"_2-窗口生命周期"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-窗口生命周期"}},[t._v("#")]),t._v(" 2 窗口生命周期")]),t._v(" "),s("p",[t._v("只要属于此窗口的第一个元素到达，就会创建一个窗口，当时间（事件或处理时间）超过其结束时间戳加上用户指定的允许延迟时，窗口将被完全删除。"),s("br"),t._v(" "),s("br"),t._v("\nFlink 保证仅删除基于时间的窗口而不是其他类型的窗口，例如全局窗口。"),s("br"),t._v(" "),s("em",[t._v("例如，使用基于事件时间的窗口策略，每 5 分钟创建一个不重叠（或滚动）的窗口并允许延迟 1 分钟，当具有落入该间隔的时间戳的第一个元素到达时，Flink 将为 12:00 到 12:05 之间的间隔创建一个新窗口，当水印（Watermark）到 12:06 时间戳时它将删除它。"),s("em",[t._v("同时我们也可以明白 Watermark 的作用")])]),s("br"),t._v(" "),s("br"),t._v("\n此外，每个窗口都有一个 Trigger 和函数（Process"),s("code",[t._v("window function")]),t._v("，ReduceFunction，AggregateFunction 或 FoldFunction）。该函数将包含要应用于窗口内容的计算，而触发器指定窗口被认为准备好应用该函数的条件。触发策略可能类似于“当窗口中的元素数量大于 4”时，或“当水位线通过窗口结束时”。触发器还可以决定在创建和删除之间的任何时间清除窗口的内容。在这种情况下，清除仅涉及窗口中的元素，而不是窗口元数据。这意味着仍然可以将新数据添加到该窗口。\n "),s("br"),t._v("\n除上述内容外，还可以指定一个"),s("code",[t._v("Evictor")]),t._v("（参见 Evictors），它可以在触发器触发后以及应用函数之前和/或之后从窗口中删除元素。")]),t._v(" "),s("h2",{attrs:{id:"_3-窗口类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-窗口类型"}},[t._v("#")]),t._v(" 3 窗口类型")]),t._v(" "),s("p",[t._v("Flink 提供以下类型窗口：")]),t._v(" "),s("ul",[s("li",[t._v("Tumbling Windows：滚动窗口（没有重叠）")]),t._v(" "),s("li",[t._v("Sliding Windows：滑动窗口 （可能会重叠）")]),t._v(" "),s("li",[t._v("Session Windows：会话窗口")]),t._v(" "),s("li",[t._v("Global Windows： 全局窗口")])]),t._v(" "),s("p",[t._v("窗口由抽象类"),s("code",[t._v("abstract class WindowAssigner<T, W extends Window>")]),t._v("不同实现类创建对应类型的窗口。")]),t._v(" "),s("ul",[s("li",[t._v("T 为窗口存放数据类型")]),t._v(" "),s("li",[t._v("W 为窗口类型 Window 实现类型。表示将窗口数据如何划分，目前提供 2 种\n"),s("ul",[s("li",[t._v("GlobalWindow 可存放所有数据的时间窗口桶")]),t._v(" "),s("li",[t._v("TimeWindow   可存放[start,end）时间窗口桶\n"),s("code",[t._v("WindowAssigner")]),t._v(" 类图关系如下：")])])])]),t._v(" "),s("p",[s("img",{attrs:{src:"https://blog-review-notes.oss-cn-beijing.aliyuncs.com/framework/flink-basis/_images/WindowAssigner_uml.png",alt:"WindowAssigner_uml"}})]),t._v(" "),s("h3",{attrs:{id:"_3-1-滚动窗户-tumbling-windows"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-滚动窗户-tumbling-windows"}},[t._v("#")]),t._v(" 3.1 滚动窗户 (Tumbling Windows)")]),t._v(" "),s("p",[s("strong",[t._v("定义")]),t._v("：滚动窗口具有固定的大小，并且不重叠。\n例如，指定大小为 5 分钟的滚动窗口，每 5 分钟将启动一个新窗口\n "),s("br"),t._v(" "),s("strong",[t._v("时间间隔指定")]),t._v("："),s("code",[t._v("Time.milliseconds(x)，Time.seconds(x)， Time.minutes(x)，...")]),t._v(" "),s("br"),t._v(" "),s("strong",[t._v("窗口对齐")]),t._v("："),s("br"),t._v("\n如最后一个示例所示，滚动窗口分配器还采用一个可选 offset 参数，该参数可用于更改窗口的对齐方式。\n如果没有偏移，则每小时滚动窗口与 epoch 对齐\n即您将获得诸如的窗口 "),s("code",[t._v("1:00:00.000 - 1:59:59.999，2:00:00.000 - 2:59:59.999 ，...")]),t._v("依此类推。\n如果要更改，可以提供一个偏移量 offset = 15 minutes\n例如，"),s("code",[t._v("1:15:00.000 - 2:14:59.999，2:15:00.000 - 3:14:59.999")]),t._v(" 等.\n一个重要的用例的偏移是窗口调整到比 UTC-0 时区等，例如，在中国，您必须指定的偏移量 Time.hours(-8)")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://blog-review-notes.oss-cn-beijing.aliyuncs.com/framework/flink-basis/_images/tumbling-windows.png",alt:"tumbling-windows"}})]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/GourdErwa/flink-advanced/blob/master/src/main/scala/io/gourd/flink/scala/games/streaming/operators/windows/TumblingWindow.scala",target:"_blank",rel:"noopener noreferrer"}},[t._v("示例代码-TumblingWindow"),s("OutboundLink")],1),t._v(" ：")]),t._v(" "),s("div",{staticClass:"language-scala extra-class"},[s("pre",{pre:!0,attrs:{class:"language-scala"}},[s("code",[t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" rolePayDataStream"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" DataStream"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("RolePay"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" GameData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DataStream"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rolePay"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" keyed "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rolePayDataStream"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("keyBy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 窗口定义: 按 event-time 滚动窗口")]),t._v("\n  keyed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TumblingEventTimeWindows"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("of"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("seconds"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 窗口定义: 按 processing-time 滚动窗口")]),t._v("\n  keyed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TumblingProcessingTimeWindows"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("of"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("seconds"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 窗口定义: 每日按 event-time 滚动窗口，时间偏移-8 小时")]),t._v("\n  keyed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("TumblingEventTimeWindows"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("of"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("days"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hours"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n  直接使用 KeyedStream.timeWindow 调用指定滚动时间单位，（内部自动判断时间域设置）等同于\n  \n    if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {\n      return window(TumblingProcessingTimeWindows.of(size));\n    } else {\n      return window(TumblingEventTimeWindows.of(size));\n    }\n */")]),t._v("\n  keyed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("timeWindow"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("seconds"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"_3-2-滑动窗-sliding-windows"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-滑动窗-sliding-windows"}},[t._v("#")]),t._v(" 3.2 滑动窗 (Sliding Windows)")]),t._v(" "),s("p",[s("strong",[t._v("定义")]),t._v("：滑动窗口按时间分配固定的大小，且按指定时间参数启动新的窗口，可能会重叠。"),s("br"),t._v("\n例如，如果您指定大小为 5 分钟，滑动参数为 1 分钟，则每 1 分钟将启动一个新窗口，累计 5 分钟进入窗口的事件后该窗口结束。\n "),s("br"),t._v(" "),s("strong",[t._v("时间间隔指定")]),t._v("："),s("code",[t._v("Time.milliseconds(x)，Time.seconds(x)， Time.minutes(x)，...")]),t._v(" "),s("br"),t._v(" "),s("strong",[t._v("窗口对齐")]),t._v("："),s("br"),t._v("\n如最后一个示例所示，滚动窗口分配器还采用一个可选 offset 参数，该参数可用于更改窗口的对齐方式。\n如果没有偏移，则每小时滚动窗口与 epoch 对齐\n即您将获得诸如的窗口 "),s("code",[t._v("1:00:00.000 - 1:59:59.999，2:00:00.000 - 2:59:59.999 ，...")]),t._v("依此类推。\n如果要更改，可以提供一个偏移量 offset = 15 minutes\n例如，"),s("code",[t._v("1:15:00.000 - 2:14:59.999，2:15:00.000 - 3:14:59.999")]),t._v(" 等.\n一个重要的用例的偏移是窗口调整到比 UTC-0 时区等，例如，在中国，您必须指定的偏移量 Time.hours(-8)")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://blog-review-notes.oss-cn-beijing.aliyuncs.com/framework/flink-basis/_images/sliding-windows.png",alt:"sliding-windows"}})]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/GourdErwa/flink-advanced/blob/master/src/main/scala/io/gourd/flink/scala/games/streaming/operators/windows/SlidingWindow.scala",target:"_blank",rel:"noopener noreferrer"}},[t._v("示例代码-SlidingWindow"),s("OutboundLink")],1),t._v(" ：")]),t._v(" "),s("div",{staticClass:"language-scala extra-class"},[s("pre",{pre:!0,attrs:{class:"language-scala"}},[s("code",[t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" rolePayDataStream"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" DataStream"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("RolePay"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" GameData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DataStream"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rolePay"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" keyed "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rolePayDataStream"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("keyBy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 窗口定义: 按 event-time 滑动窗口，将 10s 大小的窗口滑动 5s")]),t._v("\n  keyed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SlidingEventTimeWindows"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("of"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("seconds"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("seconds"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 窗口定义: 按 processing-time 滑动窗口")]),t._v("\n  keyed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SlidingProcessingTimeWindows"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("of"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("seconds"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("seconds"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 窗口定义: 每日按 event-time 滑动窗口，时间偏移-8 小时")]),t._v("\n  keyed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("SlidingProcessingTimeWindows"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("of"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hours"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hours"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hours"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n  直接使用 KeyedStream.timeWindow 调用指定滑动时间大小与滑动时间间隔 (内部自动判断时间域设置),等同于\n   if (environment.getStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) {\n       return window(SlidingProcessingTimeWindows.of(size, slide));\n   } else {\n       return window(SlidingEventTimeWindows.of(size, slide));\n   }\n  */")]),t._v("\n  keyed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("timeWindow"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("seconds"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("seconds"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"_3-3-会话窗口-session-windows"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-会话窗口-session-windows"}},[t._v("#")]),t._v(" 3.3 会话窗口 (Session Windows)")]),t._v(" "),s("p",[s("strong",[t._v("定义")]),t._v("：与滑动窗口和滚动窗口相比，会话窗口不重叠且没有固定的开始和结束时间。相反，当会话窗口在一定时间段内未收到元素时（即，发生不活动间隙时），它将关闭。"),s("br"),t._v("\n会话窗口分配器支持静态与动态时间间隔创建，其限定不活动周期有多长。当此时间段到期时，当前会话将关闭，随后的元素将分配给新的会话窗口")]),t._v(" "),s("blockquote",[s("p",[t._v("动态间隙是通过实现[[org.apache.flink.streaming.api.windowing.assigners.SessionWindowTimeGapExtractor]] 接口指定")])]),t._v(" "),s("p",[s("br"),t._v(" "),s("strong",[t._v("静态时间间隔指定")]),t._v("："),s("code",[t._v("Time.milliseconds(x)，Time.seconds(x)， Time.minutes(x)，...")]),t._v(" "),s("br"),t._v(" "),s("strong",[t._v("注意")]),t._v("："),s("br"),t._v("\n由于会话窗口没有固定的开始和结束，因此对它们的评估不同于滑动窗口和滚动窗口。\n在内部，会话窗口运算符会为每个到达的事件创建一个新窗口，如果窗口彼此之间的距离比已定义的间隔小，则将它们合并在一起。\n为了可合并的，会话窗口操作者需要一个合并触发器以及合并的窗函数，如 "),s("code",[t._v("ReduceFunction，AggregateFunction，Process")]),t._v("window function``\n(FoldFunction 不能合并）")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://blog-review-notes.oss-cn-beijing.aliyuncs.com/framework/flink-basis/_images/session-windows.png",alt:"session-windows"}}),t._v(" "),s("a",{attrs:{href:"https://github.com/GourdErwa/flink-advanced/blob/master/src/main/scala/io/gourd/flink/scala/games/streaming/operators/windows/SessionWindow.scala",target:"_blank",rel:"noopener noreferrer"}},[t._v("示例代码-SessionWindow"),s("OutboundLink")],1),t._v(" ：")]),t._v(" "),s("div",{staticClass:"language-scala extra-class"},[s("pre",{pre:!0,attrs:{class:"language-scala"}},[s("code",[t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" rolePayDataStream"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" DataStream"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("RolePay"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" GameData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DataStream"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rolePay"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" keyed "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rolePayDataStream"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("keyBy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 窗口定义: 按 event-time 定义静态时间间隔的 SessionWindow")]),t._v("\n  keyed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("EventTimeSessionWindows"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("withGap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("minutes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 窗口定义: 按 event-time 定义动态态时间间隔的 SessionWindow")]),t._v("\n  keyed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("EventTimeSessionWindows"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("withDynamicGap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" RolePay"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 确定并返回会话间隔,此处模拟返回假数据")]),t._v("\n    element"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dataUnix\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 窗口定义: 按 processing-time 定义静态时间间隔的 SessionWindow")]),t._v("\n  keyed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ProcessingTimeSessionWindows"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("withGap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Time"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("minutes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 窗口定义: 按 processing-time 定义动态态时间间隔的 SessionWindow")]),t._v("\n  keyed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DynamicProcessingTimeSessionWindows"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("withDynamicGap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("element"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" RolePay"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 确定并返回会话间隔,此处模拟返回假数据")]),t._v("\n    element"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dataUnix\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h3",{attrs:{id:"_3-4-全局窗口-global-windows"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-全局窗口-global-windows"}},[t._v("#")]),t._v(" 3.4 全局窗口 (Global Windows)")]),t._v(" "),s("p",[s("strong",[t._v("定义")]),t._v("：全局窗口分配器将所有具有相同 key 的元素分配到同一个全局窗口中，这个窗口模式仅适用于用户还需自定义触发器的情况。"),s("br"),t._v("\n否则，由于全局窗口没有一个自然的结尾，无法执行元素的聚合，将不会有计算被执行。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://blog-review-notes.oss-cn-beijing.aliyuncs.com/framework/flink-basis/_images/non-windowed.png",alt:"non-windowed"}})]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/GourdErwa/flink-advanced/blob/master/src/main/scala/io/gourd/flink/scala/games/streaming/operators/windows/GlobalWindow.scala",target:"_blank",rel:"noopener noreferrer"}},[t._v("示例代码-GlobalWindow"),s("OutboundLink")],1),t._v(" ：")]),t._v(" "),s("div",{staticClass:"language-scala extra-class"},[s("pre",{pre:!0,attrs:{class:"language-scala"}},[s("code",[t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" rolePayDataStream"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" DataStream"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("RolePay"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" GameData"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DataStream"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rolePay"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" keyed "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" rolePayDataStream"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("keyBy"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("_"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("rid"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 窗口定义: 指定全局窗口")]),t._v("\n  keyed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("window"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("GlobalWindows"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("create"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n  直接使用 KeyedStream.countWindow 调用指定 count 数内部创建等同于\n  window(GlobalWindows.create()).trigger(PurgingTrigger.of(CountTrigger.of(size)));\n  */")]),t._v("\n  keyed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("countWindow"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*\n  直接使用 KeyedStream.countWindow 调用指定 count 数内部创建 GlobalWindow 等同于\n  window(GlobalWindows.create())\n\t\t.evictor(CountEvictor.of(size))\n\t\t.trigger(CountTrigger.of(slide));\n  */")]),t._v("\n  keyed"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("countWindow"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),s("h2",{attrs:{id:"_4-触发器-trigger"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-触发器-trigger"}},[t._v("#")]),t._v(" 4 触发器 (Trigger)")]),t._v(" "),s("p",[t._v("触发器决定了一个窗口何时可以被"),s("code",[t._v("window function")]),t._v("处理，每一个窗口分配器都有一个默认的触发器，如果默认的触发器不能满足需要，你可以通过调用"),s("code",[t._v("WindowedStream.trigger(...)")]),t._v("来指定一个自定义的触发器。")]),t._v(" "),s("blockquote",[s("p",[t._v("例如："),s("code",[t._v("TumblingEventTimeWindows")]),t._v("（滚动窗口）默认触发器为"),s("code",[t._v("EventTimeTrigger")]),t._v("，默认情况下在"),s("em",[t._v("当前窗口支持最大时间小于等于当前水印线时")]),t._v("触发"),s("code",[t._v("window function")]),t._v("。")])]),t._v(" "),s("p",[s("br"),t._v("\n触发器的接口有 5 个方法来允许触发器处理不同的事件:")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("onElement()")]),t._v("方法，每个元素被添加到窗口时调用")]),t._v(" "),s("li",[s("code",[t._v("onEventTime()")]),t._v("方法，当一个已注册的事件时间计时器启动时调用")]),t._v(" "),s("li",[s("code",[t._v("onProcessingTime()")]),t._v("方法，当一个已注册的处理时间计时器启动时调用")]),t._v(" "),s("li",[s("code",[t._v("onMerge()")]),t._v("方法，与状态性触发器相关，当使用会话窗口时，两个触发器对应的窗口合并时，合并两个触发器的状态。")]),t._v(" "),s("li",[s("code",[t._v("clear()")]),t._v("方法，执行任何需要清除的相应窗口\n ")])]),t._v(" "),s("p",[t._v("上面的方法中有两个需要注意的地方:")]),t._v(" "),s("ol",[s("li",[t._v("前三个方法通过返回一个 "),s("code",[t._v("TriggerResult")]),t._v(" 来决定如何操作调用他们的事件，这些操作可以是下面操作中的一个：\n"),s("ul",[s("li",[t._v("CONTINUE：什么也不做")]),t._v(" "),s("li",[t._v("FIRE：触发计算")]),t._v(" "),s("li",[t._v("PURGE：清除窗口中的数据")]),t._v(" "),s("li",[t._v("FIRE_AND_PURGE：触发计算并清除窗口中的数据")])])]),t._v(" "),s("li",[t._v('这些函数可以注册 "处理时间定时器" 或者 "事件时间计时器"，被用来为后续的操作使用')])]),t._v(" "),s("h3",{attrs:{id:"_4-1-触发器结果"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-1-触发器结果"}},[t._v("#")]),t._v(" 4.1 触发器结果")]),t._v(" "),s("p",[t._v("触发方法的结果类型。这决定了窗口会发生什么，"),s("code",[t._v("TriggerResult")]),t._v(" 返回状态包含")]),t._v(" "),s("ul",[s("li",[t._v("CONTINUE 在窗口上不执行任何操作")]),t._v(" "),s("li",[t._v("FIRE 触发计算")]),t._v(" "),s("li",[t._v("PURGE 清除窗口中的元素")]),t._v(" "),s("li",[t._v("FIRE_AND_PURGE 触发计算，清除窗口中的元素")])]),t._v(" "),s("p",[t._v("一旦触发器确定窗口准备好处理数据，它将触发。例如，它返回 FIRE 或 FIRE_AND_PURGE。这是窗口算子给当前窗口发送结果的信号。")]),t._v(" "),s("blockquote",[s("p",[t._v("给定一个带有"),s("code",[t._v("window function")]),t._v("的窗口，所有的元素都被传递给"),s("code",[t._v("window function")]),t._v("(可能在将所有元素传递给"),s("code",[t._v("Evictor")]),t._v("之后)。带有 ReduceFunction 或者 FoldFunction 的窗口只是简单地发出他们急切希望得到的聚合结果。")])]),t._v(" "),s("p",[t._v("默认情况下，内置的触发器只返回 FIRE，不会清除窗口状态")]),t._v(" "),s("blockquote",[s("p",[t._v("注意：清除将仅删除窗口的内容，并将保留有关该窗口的任何潜在元信息和任何触发状态。")])]),t._v(" "),s("h3",{attrs:{id:"_4-2-windowassigners-的默认触发器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-2-windowassigners-的默认触发器"}},[t._v("#")]),t._v(" 4.2 WindowAssigners 的默认触发器")]),t._v(" "),s("p",[t._v("默认触发器参考 "),s("code",[t._v("WindowAssigner#getDefaultTrigger(StreamExecutionEnvironment env)")]),t._v(" 子类实现"),s("br"),t._v(" "),s("strong",[t._v("注意")]),t._v("：GlobalWindow 的默认 NeverTrigger 永不触发的。因此，必须定义一个自定义触发器"),s("br"),t._v(" "),s("br"),t._v(" "),s("strong",[t._v("注意")]),t._v("：调用"),s("code",[t._v("trigger()")]),t._v("指定触发器后，将覆盖的默认触发器。")]),t._v(" "),s("h3",{attrs:{id:"_4-3-flink-内置和自定义触发器"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-3-flink-内置和自定义触发器"}},[t._v("#")]),t._v(" 4.3 Flink 内置和自定义触发器")]),t._v(" "),s("p",[s("a",{attrs:{href:"https://github.com/apache/flink/blob/master//flink-streaming-java/src/main/java/org/apache/flink/streaming/api/windowing/triggers/Trigger.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("Trigger"),s("OutboundLink")],1),t._v(" 内置实现类图\n"),s("img",{attrs:{src:"https://blog-review-notes.oss-cn-beijing.aliyuncs.com/framework/flink-basis/_images/Trigger_uml.png",alt:"Trigger_uml"}}),t._v(" "),s("br"),t._v("\nFlink 带有一些内置触发器如下：")]),t._v(" "),s("ul",[s("li",[s("code",[t._v("ContinuousEventTimeTrigger")]),t._v(" 基于 EventTime&Watermark,根据给定的时间间隔连续触发")]),t._v(" "),s("li",[s("code",[t._v("ContinuousProcessingTimeTrigger")]),t._v(" 基于 ProcessingTime,根据给定的时间间隔连续触发")]),t._v(" "),s("li",[s("code",[t._v("CountTrigger")]),t._v(" 根据给定阈值，数量一旦达到阈值触发")]),t._v(" "),s("li",[s("code",[t._v("DeltaTrigger")]),t._v(" 根据 DeltaFunction 和阈值触发")]),t._v(" "),s("li",[s("code",[t._v("NeverTrigger")]),t._v(" 永远不会触发的触发器，它是 GlobalWindows 的默认触发器")]),t._v(" "),s("li",[s("code",[t._v("EventTimeTrigger")]),t._v(" EventTime&Watermark 通过窗口的支持的最大时间时触发")]),t._v(" "),s("li",[s("code",[t._v("ProcessingTimeTrigger")]),t._v(" ProcessingTime 通过窗口的支持的最大时间时触发")]),t._v(" "),s("li",[s("code",[t._v("PurgingTrigger")]),t._v(" 可以将任何触发器转换为清除的触发器")]),t._v(" "),s("li",[s("code",[t._v("StateCleaningCountTrigger")]),t._v(" 元素数量达到给定数量时触发或触发清除计时器")])]),t._v(" "),s("p",[t._v("自定义触发器实现"),s("code",[t._v("Trigger")]),t._v("接口即可。")]),t._v(" "),s("h2",{attrs:{id:"_5-驱逐器-evictor"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-驱逐器-evictor"}},[t._v("#")]),t._v(" 5 驱逐器 (Evictor)")]),t._v(" "),s("p",[t._v("驱逐器能够在触发器触发之后，在应用"),s("code",[t._v("window function")]),t._v("之前或之后从窗口中移除元素，也可以之前之后都删除元素。调用"),s("code",[t._v(".evictor(CountEvictor.of(10))")]),t._v("进行设置\n ")]),t._v(" "),s("p",[s("strong",[t._v("Evictor 接口有两个方法：")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("evictBefore()")]),t._v("包含驱逐逻辑，在"),s("code",[t._v("window function")]),t._v("之前应用")]),t._v(" "),s("li",[s("code",[t._v("evictAfter()")]),t._v("在"),s("code",[t._v("window function")]),t._v("之后应用。在应用"),s("code",[t._v("window function")]),t._v("之前被逐出的元素将不被处理\n ")])]),t._v(" "),s("p",[s("strong",[t._v("内置的 Evictor:")])]),t._v(" "),s("ul",[s("li",[s("code",[t._v("CountEvictor")]),t._v("：保持窗口内用户指定数量的元素，如果多于用户指定的数量，从窗口缓冲区的开头丢弃剩余的元素")]),t._v(" "),s("li",[s("code",[t._v("DeltaEvictor")]),t._v("：使用 DeltaFunction 和阈值，计算窗口缓冲区中的最后一个元素与其余每个元素之间的 delta 值，并删除 delta 值大于或等于阈值的元素")]),t._v(" "),s("li",[s("code",[t._v("TimeEvictor")]),t._v("：以毫秒为单位的时间间隔作为参数，对于给定的窗口，找到元素中的最大的时间戳 max_ts，并删除时间戳小于 max_ts - interval 的所有元素\n ")])]),t._v(" "),s("p",[s("strong",[t._v("注意")])]),t._v(" "),s("ol",[s("li",[t._v("默认默认情况下，所有预先实现的 Evictor 均在"),s("code",[t._v("window function")]),t._v("之前应用其逻辑。")]),t._v(" "),s("li",[t._v("如果指定了 Evictor(evictBefore) 则会妨碍任何 pre-aggregation 操作，因为所有的窗口元素都会在 windowing function 计算之前先执行 evictor 操作")]),t._v(" "),s("li",[t._v("Flink 不保证窗口内元素的顺序，Evictor 可以从窗口的开头删除元素，但不一定是最先到达的元素")])]),t._v(" "),s("h2",{attrs:{id:"_6-允许延迟-allowed-lateness"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-允许延迟-allowed-lateness"}},[t._v("#")]),t._v(" 6 允许延迟 (Allowed Lateness)")]),t._v(" "),s("p",[t._v("默认情况下，当 watermark 通过之后，再有之前的数据到达时，这些数据会被删除。为了避免有些迟到的数据被删除，因此产生了 allowedLateness 的概念。"),s("br"),t._v(" "),s("em",[t._v("allowedLateness 针对"),s("strong",[t._v("event-time")]),t._v("而言，对于其他时间类型无意义。")])]),t._v(" "),s("blockquote",[s("p",[s("code",[t._v("WindowOperator#processElement")]),t._v("窗口操作中"),s("code",[t._v("allowedLateness")]),t._v("参与运算相关源码分析:\n接收一个事件 element-> 根据 element 创建窗口 -> 判断创建的每个窗口是否已经延迟 (延迟直接跳出) -> 触发器进行 onElement 操作 -> 判断触发器返回结果")])]),t._v(" "),s("p",[s("code",[t._v("allowedLateness")]),t._v("主要作用为：")]),t._v(" "),s("ul",[s("li",[t._v("窗口的清理时间逻辑\n"),s("ul",[s("li",[t._v("如果为 event-time 类型窗口为 window.maxTimestamp() + allowedLateness")]),t._v(" "),s("li",[t._v("其他情况为 window.maxTimestamp()")])])]),t._v(" "),s("li",[t._v("窗口是否延迟\n"),s("ul",[s("li",[t._v("如果为 event-time 类型窗口为 window.maxTimestamp() + allowedLateness <= currentWatermark")]),t._v(" "),s("li",[t._v("其他情况 false")])])]),t._v(" "),s("li",[t._v("事件是否延迟\n"),s("ul",[s("li",[t._v("如果为 event-time 类型窗口为 element.getTimestamp() + allowedLateness <= currentWatermark")]),t._v(" "),s("li",[t._v("其他情况 false")])])])])])}),[],!1,null,null,null);n.default=e.exports}}]);