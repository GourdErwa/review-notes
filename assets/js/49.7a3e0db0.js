(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{424:function(t,e,r){"use strict";r.r(e);var a=r(10),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,r=t._self._c||e;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"leetcode-题目描述"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#leetcode-题目描述"}},[t._v("#")]),t._v(" LeetCode 题目描述")]),t._v(" "),r("p",[t._v("5 个沉默寡言的哲学家围坐在圆桌前，每人面前一盘意面。叉子放在哲学家之间的桌面上。（5 个哲学家，5 根叉子）")]),t._v(" "),r("p",[t._v("所有的哲学家都只会在思考和进餐两种行为间交替。哲学家只有同时拿到左边和右边的叉子才能吃到面，而同一根叉子在同一时间只能被一个哲学家使用。每个哲学家吃完面后都需要把叉子放回桌面以供其他哲学家吃面。只要条件允许，哲学家可以拿起左边或者右边的叉子，但在没有同时拿到左右叉子时不能进食。")]),t._v(" "),r("p",[t._v("假设面的数量没有限制，哲学家也能随便吃，不需要考虑吃不吃得下。")]),t._v(" "),r("p",[t._v("设计一个进餐规则（并行算法）使得每个哲学家都不会挨饿；也就是说，在没有人知道别人什么时候想吃东西或思考的情况下，每个哲学家都可以在吃饭和思考之间一直交替下去。")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://en.wikipedia.org/wiki/Dining_philosophers_problem",target:"_blank",rel:"noopener noreferrer"}},[t._v("问题描述和图片参考维基百科"),r("OutboundLink")],1)]),t._v(" "),r("img",{staticStyle:{zoom:"50%"},attrs:{src:"https://ipic-review-notes.oss-cn-beijing.aliyuncs.com/2020-02-06-%E5%93%B2%E5%AD%A6%E5%AE%B6%E5%B0%B1%E9%A4%90.jpeg",alt:"哲学家就餐"}}),t._v(" "),r("p",[t._v("哲学家从 0 到 4 按 顺时针 编号。请实现函数")]),t._v(" "),r("p",[r("code",[t._v("void wantsToEat(philosopher, pickLeftFork, pickRightFork, eat, putLeftFork, putRightFork)")])]),t._v(" "),r("p",[t._v("philosopher 哲学家的编号。\npickLeftFork 和 pickRightFork 表示拿起左边或右边的叉子。\neat 表示吃面。\nputLeftFork 和 pickRightFork 表示放下左边或右边的叉子。\n由于哲学家不是在吃面就是在想着啥时候吃面，所以思考这个方法没有对应的回调。")]),t._v(" "),r("p",[t._v("给你 5 个线程，每个都代表一个哲学家，请你使用类的同一个对象来模拟这个过程。在最后一次调用结束之前，可能会为同一个哲学家多次调用该函数。")]),t._v(" "),r("p",[t._v("示例：")]),t._v(" "),r("div",{staticClass:"language- extra-class"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("输入：n = 1\n输出：[[4,2,1],[4,1,1],[0,1,1],[2,2,1],[2,1,1],[2,0,3],[2,1,2],[2,2,2],[4,0,3],[4,1,2],[0,2,1],[4,2,2],[3,2,1],[3,1,1],[0,0,3],[0,1,2],[0,2,2],[1,2,1],[1,1,1],[3,0,3],[3,1,2],[3,2,2],[1,0,3],[1,1,2],[1,2,2]]\n解释:\nn 表示每个哲学家需要进餐的次数。\n输出数组描述了叉子的控制和进餐的调用，它的格式如下：\noutput[i] = [a, b, c] (3个整数)\n\n- a 哲学家编号。\n- b 指定叉子：{1 : 左边, 2 : 右边}.\n- c 指定行为：{1 : 拿起, 2 : 放下, 3 : 吃面}。\n  如 [4,2,1] 表示 4 号哲学家拿起了右边的叉子。\n")])])]),r("p",[t._v("提示："),r("code",[t._v("1 <= n <= 60")])]),t._v(" "),r("p",[t._v("来源：力扣（LeetCode）\n链接：https://leetcode-cn.com/problems/the-dining-philosophers\n著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。")]),t._v(" "),r("h2",{attrs:{id:"题解"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#题解"}},[t._v("#")]),t._v(" 题解")]),t._v(" "),r("p",[t._v("整体思考思路为：\n5 个线程并发执行（5个哲学家顺时针编号为[0-4]）")]),t._v(" "),r("p",[t._v("0 吃饭时，2号或者3号可以吃")]),t._v(" "),r("h3",{attrs:{id:"solution1"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#solution1"}},[t._v("#")]),t._v(" Solution1")]),t._v(" "),r("h2",{attrs:{id:"参考"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考"}},[t._v("#")]),t._v(" 参考")]),t._v(" "),r("ul",[r("li",[t._v("参考博文-"),r("a",{attrs:{href:"https://gourderwa.blog.csdn.net/article/details/103619528",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java 线程等待通知机制（wait、notify）"),r("OutboundLink")],1)]),t._v(" "),r("li",[t._v("参考博文-"),r("a",{attrs:{href:"https://gourderwa.blog.csdn.net/article/details/103726711",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java 控制并发数的信号量-Semaphore"),r("OutboundLink")],1)]),t._v(" "),r("li",[t._v("更多并发编程相关博文参考 "),r("a",{attrs:{href:"https://blog.csdn.net/xiaohulunb/article/details/103594468",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java 并发编程-专栏文章目录汇总 "),r("OutboundLink")],1)])])])}),[],!1,null,null,null);e.default=n.exports}}]);