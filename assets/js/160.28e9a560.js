(window.webpackJsonp=window.webpackJsonp||[]).push([[160],{533:function(t,a,s){"use strict";s.r(a);var n=s(10),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("blockquote",[s("p",[t._v("专栏原创出处："),s("a",{attrs:{href:"https://github.com/GourdErwa/review-notes/tree/master/language/java-core",target:"_blank",rel:"noopener noreferrer"}},[t._v("github-源笔记文件 "),s("OutboundLink")],1),t._v(" ，"),s("a",{attrs:{href:"https://github.com/GourdErwa/java-advanced/tree/master/java-core",target:"_blank",rel:"noopener noreferrer"}},[t._v("github-源码 "),s("OutboundLink")],1),t._v("，欢迎 Star，转载请附上原文出处链接和本声明。")])]),t._v(" "),s("p",[t._v("Java 核心知识专栏系列笔记，系统性学习可访问个人复盘笔记-技术博客 "),s("a",{attrs:{href:"https://review-notes.top/language/java-core/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java 核心知识 "),s("OutboundLink")],1)]),t._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#hashmap"}},[t._v("HashMap")])]),s("li",[s("a",{attrs:{href:"#hashmap-关键字段讲解"}},[t._v("HashMap 关键字段讲解")])]),s("li",[s("a",{attrs:{href:"#为什么"}},[t._v("为什么")]),s("ul",[s("li",[s("a",{attrs:{href:"#为什么-table-要设计为-node-结构的数组"}},[t._v("为什么 table 要设计为 Node[] 结构的数组？")])]),s("li",[s("a",{attrs:{href:"#为什么容量为-2-次幂"}},[t._v("为什么容量为 2 次幂？")])])])]),s("li",[s("a",{attrs:{href:"#hash-方法解读"}},[t._v("hash 方法解读")])]),s("li",[s("a",{attrs:{href:"#put-方法解读"}},[t._v("put 方法解读")])]),s("li",[s("a",{attrs:{href:"#get-方法解读"}},[t._v("get 方法解读")])]),s("li",[s("a",{attrs:{href:"#rehash-扩容方法解读"}},[t._v("rehash 扩容方法解读")])]),s("li",[s("a",{attrs:{href:"#哈希碰撞代码实战"}},[t._v("哈希碰撞代码实战")]),s("ul",[s("li",[s("a",{attrs:{href:"#实战代码说明"}},[t._v("实战代码说明")])]),s("li",[s("a",{attrs:{href:"#哈希碰撞实战分析"}},[t._v("哈希碰撞实战分析")])])])]),s("li",[s("a",{attrs:{href:"#hashmap-存在的问题"}},[t._v("HashMap 存在的问题")])])])]),s("p"),t._v(" "),s("h2",{attrs:{id:"hashmap"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashmap"}},[t._v("#")]),t._v(" HashMap")]),t._v(" "),s("p",[t._v("基于 jdk1.8 讲解分析。本篇不涉及太多源码讲解，重点为采用"),s("strong",[t._v("哈希碰撞实战分析")]),t._v("处理过程。")]),t._v(" "),s("p",[t._v("如果对红黑树转换为单链表感兴趣，可以修改实战代码进行 remove 操作观察处理过程。")]),t._v(" "),s("blockquote",[s("ul",[s("li",[t._v("在 debug 过程中如果你看不到 map 内部数据结构的话，idea 中修改设置 Data Views->Java->Enable alternative view...。")]),t._v(" "),s("li",[t._v('Gradle 启动时运行窗口"可能"为 2 个，选择你的窗口代码调试，Gradle 本身的窗口我们可以忽略。')])])]),t._v(" "),s("h2",{attrs:{id:"hashmap-关键字段讲解"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-关键字段讲解"}},[t._v("#")]),t._v(" HashMap 关键字段讲解")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("table"),s("br"),t._v(" "),s("code",[t._v("Node[]")]),t._v(" 结构的数组，保存我们的 K/V 键值对信息。Node 可能为单链表（Node）或者红黑树（TreeNode）结构，TreeNode 继承了 Node。")])]),t._v(" "),s("li",[s("p",[t._v("capacity"),s("br"),t._v("\n容量，即 table 的长度，默认 16。容量为 2 次幂。")])]),t._v(" "),s("li",[s("p",[t._v("loadFactor"),s("br"),t._v("\n负载因子，默认 0.75f。决定了桶的使用情况。")]),t._v(" "),s("ul",[s("li",[t._v("负载因子太大，桶的利用率越高，但是冲突的几率变大了。")]),t._v(" "),s("li",[t._v("负载因子太小，桶的利用率越低，冲突几率变小了。")]),t._v(" "),s("li",[t._v("平衡与折衷的默认值设置为 0.75f。可参考 "),s("a",{attrs:{href:"http://www.ruanyifeng.com/blog/2015/06/poisson-distribution.html#comment-356111",target:"_blank",rel:"noopener noreferrer"}},[t._v("泊松分布和指数分布 "),s("OutboundLink")],1),t._v("。")])])]),t._v(" "),s("li",[s("p",[t._v("threshold"),s("br"),t._v("\n扩容阈值，当 K/V 的数量大于等于该阈值时 table 进行扩容，初始化时默认为 16。")]),t._v(" "),s("ul",[s("li",[t._v("进行 put 或者扩容操作后按公式 threshold = capacity * loadFactor 计算。")]),t._v(" "),s("li",[t._v("假如我们的初始化容量是 16，负载因子是 0.75f，第一次扩容的阈值为 12。")])])]),t._v(" "),s("li",[s("p",[t._v("size"),s("br"),t._v("\nK/V 的数量，我们放入 table 中的键值对数量。")])])]),t._v(" "),s("h2",{attrs:{id:"为什么"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么"}},[t._v("#")]),t._v(" 为什么")]),t._v(" "),s("h3",{attrs:{id:"为什么-table-要设计为-node-结构的数组"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么-table-要设计为-node-结构的数组"}},[t._v("#")]),t._v(" 为什么 table 要设计为 "),s("code",[t._v("Node[]")]),t._v(" 结构的数组？")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("如何确定 K/V 数据要保存到哪个数组下标呢？"),s("br"),t._v("\n通过 K 的哈希值定位到数组下标。")])]),t._v(" "),s("li",[s("p",[t._v("如果多个 K 生成的哈希值出现都一样时（哈希冲突）怎么办？"),s("br"),t._v(" "),s("em",[t._v("此处应该是理解 HashMap 数据结构的重点了")]),t._v("。出现冲突后定位的数组索引下标都一样了，因此我们要在一个数组下标上放好多数据，\nHashMap 采用了 Node（单链表），TreeNode（红黑树）来保存每个数组下标的数据。")])]),t._v(" "),s("li",[s("p",[t._v("为什么要用 单链表、红黑树 两种树结构呢？")]),t._v(" "),s("ul",[s("li",[t._v("红黑树需要进行左旋，右旋操作， 而单链表不需要，单链表只能顺序查找。")]),t._v(" "),s("li",[t._v("如果元素小于 8 个，单链表，查询成本高，新增成本低。")]),t._v(" "),s("li",[t._v("如果元素大于 8 个，红黑树，查询成本低，新增成本高。")])])]),t._v(" "),s("li",[s("p",[t._v("什么时候单链表与红黑树互相转换？")]),t._v(" "),s("ul",[s("li",[t._v("如果当前链表的个数 ≥ 8，且 capacity ≥ 64，单链表会转为红黑树。")]),t._v(" "),s("li",[t._v("如果当前红黑树的个数 ≤ 6，红黑树会转为单链表。")]),t._v(" "),s("li",[t._v("原因可参考 "),s("a",{attrs:{href:"https://notes.daiyuhe.com/bucket-convert-to-red-black-tree-when-8-size/",target:"_blank",rel:"noopener noreferrer"}},[t._v("IanDai's Notes"),s("OutboundLink")],1),t._v("，此处不做复述。")])])])]),t._v(" "),s("h3",{attrs:{id:"为什么容量为-2-次幂"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#为什么容量为-2-次幂"}},[t._v("#")]),t._v(" 为什么容量为 2 次幂？")]),t._v(" "),s("p",[t._v("通过 K 的 hash 值定位 table 下标的代码为： "),s("code",[t._v("Node p = tab[i = (n - 1) & hash]")]),t._v("。")]),t._v(" "),s("blockquote",[s("p",[t._v("& 与运算，相同位置都为 1 时结果为 1，否则为 0。")])]),t._v(" "),s("p",[t._v("因为 n 永远是 2 的次幂，所以 n-1 通过二进制表示，永远都是尾端以连续 1 的形式表示（00001111，00000011）。\n当 (n - 1) 和 hash 做与运算时，会保留 hash 中 后 x 位的 1。")]),t._v(" "),s("p",[t._v("我们用 4 位无符号数二进制作为示例说明：")]),t._v(" "),s("ul",[s("li",[t._v("table 长度为 n = 4 ，[4] 十进制 = [0100] 二进制")]),t._v(" "),s("li",[t._v("K 的 hash 值为 hash = 7，[7] 十进制 = [0111] 二进制")]),t._v(" "),s("li",[t._v("(n - 1) = 3 ，[4 - 1 = 3] 十进制 = [0100-0001=0011] 二进制")]),t._v(" "),s("li",[t._v("(n - 1) & hash = hash % n，[3 & 7 = 7 % 4 = 3] 十进制 = 0011 & 0111 = 0011 = 3")])]),t._v(" "),s("p",[s("strong",[t._v("原因总结为：")])]),t._v(" "),s("ul",[s("li",[t._v("& 运算速度快，至少比 % 取模运算快")]),t._v(" "),s("li",[t._v("保证下标肯定在 capacity 中，不会超出数组长度")]),t._v(" "),s("li",[t._v("当 n 为 2 次幂时，满足公式：(n - 1) & hash = hash % n")])]),t._v(" "),s("h2",{attrs:{id:"hash-方法解读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hash-方法解读"}},[t._v("#")]),t._v(" hash 方法解读")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("hash")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" h"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("hashCode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("^")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("HashMap 计算 Key 的哈希值时，没有直接使用 Key 的 hashCode 方法，而是取 Key 的 hashCode 方法低 16 位与 Key 的 hashCode 异或运算，让哈希更松散，减少碰撞。")]),t._v(" "),s("h2",{attrs:{id:"put-方法解读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#put-方法解读"}},[t._v("#")]),t._v(" put 方法解读")]),t._v(" "),s("p",[t._v("主要处理逻辑为：")]),t._v(" "),s("ul",[s("li",[t._v("判断 table 是否初始化")]),t._v(" "),s("li",[t._v("判断数组下标位置的单链表节点是否初始化，未初始化时构造节点插入")]),t._v(" "),s("li",[t._v("以上条件都不满足时，说明数据下标位置出现冲突了，拿到当前的 Node 节点\n"),s("ul",[s("li",[t._v("如果当前节点 Key 与添加的 Key 相等，执行替换")]),t._v(" "),s("li",[t._v("如果当前节点是红黑树，加入红黑树节点")]),t._v(" "),s("li",[t._v("如果当前节点是链表，循环链表，如果链表上节点与添加节点相等，替换退出。否则添加到尾节点，如果链表长度 ≥ 8 尝试转红黑树")])])]),t._v(" "),s("li",[t._v("最后判断是否需要扩容")])]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("putVal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" hash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" onlyIfAbsent"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n                   "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" evict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" tab"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果 table 未初始则初始化")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tab "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" table"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tab"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tab "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("resize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果 table 下标位置的节点为空，则构造一个节点放入")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tab"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&")]),t._v(" hash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            tab"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("newNode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),t._v(" k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果 hash 冲突了，使用 equals 比较，如果相等替换")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hash "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" hash "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" key "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                e "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果当前节点是红黑树节点，对红黑树节点执行 put 操作")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeNode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                e "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TreeNode")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("K")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("putTreeVal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tab"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" hash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果当前节点是链表节点，循环寻找链表尾节点")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" binCount "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("binCount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                        p"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("next "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("newNode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("binCount "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" TREEIFY_THRESHOLD "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断转红黑树")]),t._v("\n                            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("treeifyBin")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tab"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" hash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n                    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("hash "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" hash "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n                        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" key "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" key"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("k"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 如果和链表的某个节点相等，跳出循环")]),t._v("\n                    p "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Key 值存在时替换")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("V")]),t._v(" oldValue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),t._v("onlyIfAbsent "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" oldValue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n                    e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("afterNodeAccess")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" oldValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("modCount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),t._v("size "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" threshold"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 判断是否需要扩容操作")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("resize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("afterNodeInsertion")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("evict"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("h2",{attrs:{id:"get-方法解读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#get-方法解读"}},[t._v("#")]),t._v(" get 方法解读")]),t._v(" "),s("ul",[s("li",[t._v("判断表或 key 是否是 null，如果是直接返回 null")]),t._v(" "),s("li",[t._v("判断索引处第一个 key 与传入 key 是否相等，如果相等直接返回")]),t._v(" "),s("li",[t._v("如果不相等，判断链表是否是红黑二叉树，如果是，直接从树中取值")]),t._v(" "),s("li",[t._v("如果不是树，遍历链表查找")])]),t._v(" "),s("h2",{attrs:{id:"rehash-扩容方法解读"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#rehash-扩容方法解读"}},[t._v("#")]),t._v(" rehash 扩容方法解读")]),t._v(" "),s("p",[t._v("假设扩容前的 table 大小为 2 的 N 次方，由上述 put 方法解析可知，元素的 table 索引由其 hash 值的后 N 位确定。\n扩容后的 table 大小即为 2 的 N+1 次方，则其中元素的 table 索引为其 hash 值的后 N+1 位确定，比原来多了一位。\n因此，table 中的元素只有两种情况：")]),t._v(" "),s("ul",[s("li",[t._v("元素 hash 值第 N+1 位为 0：不需要进行位置调整")]),t._v(" "),s("li",[t._v("元素 hash 值第 N+1 位为 1：调整至原索引的两倍位置")])]),t._v(" "),s("p",[t._v("参考哈希碰撞代码实战#分析扩容过程理解。")]),t._v(" "),s("h2",{attrs:{id:"哈希碰撞代码实战"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#哈希碰撞代码实战"}},[t._v("#")]),t._v(" 哈希碰撞代码实战")]),t._v(" "),s("p",[t._v("学习一百篇技术文章，不如实战 debug 吸收率高。没有实战的阅读，来年还得搜索出来阅读😏。")]),t._v(" "),s("h3",{attrs:{id:"实战代码说明"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实战代码说明"}},[t._v("#")]),t._v(" 实战代码说明")]),t._v(" "),s("p",[t._v("我们声明一个 ConflictingHash 类作为 Key，内部维护一个整数，重写 equals&hashCode 方法。")]),t._v(" "),s("ul",[s("li",[t._v("equals 方法比较 i 的大小")]),t._v(" "),s("li",[t._v("hashCode 方法对 i 取模，然后放大 16 倍")])]),t._v(" "),s("p",[t._v("此处重写 hashCode 时，取模为了让 hash 一直冲突，放大 16 倍为了保证扩容过程中链表节点的转移分析。")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConflictingHash")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("o "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getClass")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConflictingHash")]),t._v(" that "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConflictingHash")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" that"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 因为此处取模后，左移 4 为，相当于放大 16 倍。最大为 48")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 相对于 HashMap#hash(Object) 函数来说，(h = key.hashCode()) ^ (h >>> 16) 结果不变。")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Override")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("hashCode")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("%")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 等价于 (i % 4) * 16")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("通过反射与 org.openjdk.jol.info.GraphLayout 对象实时获取 HashMap 内部数据值变化情况分析，在关键操作时可 debug 查看运行过程。")]),t._v(" "),s("p",[t._v("因篇幅限制，源码参考 "),s("a",{attrs:{href:"https://github.com/GourdErwa/java-advanced/blob/master/java-core/src/main/java/io/gourd/java/core/map/HashMapConflictingHash.java",target:"_blank",rel:"noopener noreferrer"}},[t._v("HashMapConflictingHash"),s("OutboundLink")],1)]),t._v(" "),s("h3",{attrs:{id:"哈希碰撞实战分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#哈希碰撞实战分析"}},[t._v("#")]),t._v(" 哈希碰撞实战分析")]),t._v(" "),s("p",[t._v("我们初始化一个容量为 16 ，负载因子为 0.75f 的 HashMap，put 后打印内部数据。关键日志如下：")]),t._v(" "),s("ul",[s("li",[t._v("size：大小等于 put 的整数次数，从 1 开始 put")]),t._v(" "),s("li",[t._v("Node：单链表节点")]),t._v(" "),s("li",[t._v("TreeNode：红黑树节点")]),t._v(" "),s("li",[t._v("table[0] = 1,2,3,4,5,6,7,8 ：表示数据节点中元素内容")])]),t._v(" "),s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[t._v("loadFactor = 0.75\n-----------------------------------------------\ntable      = null   // 初始化时为 null\nthreshold  = 16     // 初始化时为 16\nsize       = 0\n\n-----------------------------------------------\ntable      = length=16，[0]=Node \nthreshold  = 12     // 重新计算 12 = 16 * 0.75\nsize       = 1\n\n-----------------------------------------------\ntable      = length=16，[0]=Node \nthreshold  = 12\nsize       = 8\n\ntable[0] = 1,2,3,4,5,6,7,8\n\n-----------------------------------------------\ntable      = length=32，[0]=Node ，[16]=Node \nthreshold  = 24\nsize       = 9\n\ntable[0] = 2,4,6,8\ntable[16] = 1,3,5,7,9\n\n-----------------------------------------------\ntable      = length=32，[0]=Node ，[16]=Node \nthreshold  = 24\nsize       = 16\n\ntable[0] = 2,4,6,8,10,12,14,16\ntable[16] = 1,3,5,7,9,11,13,15\n\n-----------------------------------------------\ntable      = length=64，[0]=Node ，[16]=Node ，[32]=Node ，[48]=Node \nthreshold  = 48\nsize       = 17\n\ntable[0] = 4,8,12,16\ntable[16] = 1,5,9,13,17\ntable[32] = 2,6,10,14\ntable[48] = 3,7,11,15\n\n-----------------------------------------------\ntable      = length=64，[0]=Node ，[16]=Node ，[32]=Node ，[48]=Node \nthreshold  = 48\nsize       = 32\n\n-----------------------------------------------\ntable      = length=64，[0]=Node ，[16]=TreeNode ，[32]=Node ，[48]=Node \nthreshold  = 48\nsize       = 33\n\n")])])]),s("h4",{attrs:{id:"分析扩容过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分析扩容过程"}},[t._v("#")]),t._v(" 分析扩容过程")]),t._v(" "),s("ul",[s("li",[t._v("添加第 9 个数据时，发生扩容，因为 table[0] 上的链表长度为 8，转红黑树时因为 table 容量不够 64。")]),t._v(" "),s("li",[t._v("添加第 17 个数据时，发生扩容，因为 table[0] 上的链表长度为 8，转红黑树时因为 table 容量不够 64。")])]),t._v(" "),s("h4",{attrs:{id:"分析扩容时节点转移过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分析扩容时节点转移过程"}},[t._v("#")]),t._v(" 分析扩容时节点转移过程")]),t._v(" "),s("p",[t._v("我们追踪 "),s("code",[t._v("[ConflictingHash(3)] 哈希值 = 3 % 4 << 4 = 48 = [110000] 二进制")]),t._v(" 对象在扩容时的转移过程。")]),t._v(" "),s("p",[t._v("通过 "),s("code",[t._v("tab[i = (n - 1) & hash]")]),t._v(" 定位 table 下标为：")]),t._v(" "),s("ul",[s("li",[t._v("(16 - 1) & 48 = 1 111 & 110 000 = 0 = [0] 十进制")]),t._v(" "),s("li",[t._v("(32 - 1) & 48 = 11 111 & 110 000 = 10 000 = [16] 十进制")]),t._v(" "),s("li",[t._v("(64 - 1) & 48 = 111 111 & 110 000 = 110 000 = [48] 十进制")])]),t._v(" "),s("p",[t._v("在容量为 16、32、64 时，分别对应 table[0]，table[16]，table[48] 位置，与上述日志内容吻合。")]),t._v(" "),s("h4",{attrs:{id:"分析红黑树转换过程"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#分析红黑树转换过程"}},[t._v("#")]),t._v(" 分析红黑树转换过程")]),t._v(" "),s("p",[t._v("添加第 33 个数据时，因为 table[16] 上的链表长度为 8，table 容量为 64，该节点转换为红黑树节点")]),t._v(" "),s("h2",{attrs:{id:"hashmap-存在的问题"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#hashmap-存在的问题"}},[t._v("#")]),t._v(" HashMap 存在的问题")]),t._v(" "),s("ul",[s("li",[t._v("发生扩容时，可能会产生循环链表，在执行 get 的时候，会触发死循环，引起 CPU 的 100%问题。当然，并发就应该用 ConcurrentHashMap 实现。")])])])}),[],!1,null,null,null);a.default=e.exports}}]);