(window.webpackJsonp=window.webpackJsonp||[]).push([[203],{577:function(t,a,e){"use strict";e.r(a);var s=e(10),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("blockquote",[e("p",[t._v("专栏原创出处："),e("a",{attrs:{href:"https://github.com/GourdErwa/review-notes/tree/master/language/scala-basis",target:"_blank",rel:"noopener noreferrer"}},[t._v("github-源笔记文件 "),e("OutboundLink")],1),t._v(" ，"),e("a",{attrs:{href:"https://github.com/GourdErwa/scala-advanced/tree/master/scala-base/src/main/scala/com/gourd/scala/base/",target:"_blank",rel:"noopener noreferrer"}},[t._v("github-源码 "),e("OutboundLink")],1),t._v("，欢迎 Star，转载请附上原文出处链接和本声明。")])]),t._v(" "),e("p",[t._v("Scala 编程语言专栏系列笔记，系统性学习可访问个人复盘笔记-技术博客 "),e("a",{attrs:{href:"https://review-notes.top/language/scala-basis/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Scala 编程语言 "),e("OutboundLink")],1)]),t._v(" "),e("p"),e("div",{staticClass:"table-of-contents"},[e("ul",[e("li",[e("a",{attrs:{href:"#什么是复合类型"}},[t._v("什么是复合类型")])])])]),e("p"),t._v(" "),e("h2",{attrs:{id:"什么是复合类型"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#什么是复合类型"}},[t._v("#")]),t._v(" 什么是复合类型")]),t._v(" "),e("p",[t._v("复合类型是指一个对象的类型是多种类型的子类型，即多个类型的交集。")]),t._v(" "),e("p",[t._v("e.g："),e("code",[t._v("def cloneAndReset(obj: Cloneable with Resetable)")])]),t._v(" "),e("div",{staticClass:"language-scala extra-class"},[e("pre",{pre:!0,attrs:{class:"language-scala"}},[e("code",[t._v("  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("trait")]),t._v(" Cloneable "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" java"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lang"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Cloneable "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("override")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" clone"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Cloneable "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("clone"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("asInstanceOf"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Cloneable"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("trait")]),t._v(" Resetable "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" reset"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("Unit")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里的 obj 类型应该是什么？如果是 Cloneable 则无法 reset 对象 obj，如果是 Resetable，则无法克隆 obj")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* def cloneAndReset(obj: ?): Cloneable = {\n       val cloned = obj.clone()\n       obj.reset\n       cloned\n     } */")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 这里可以把 obj 的类型定义为复合类型，即 obj: Cloneable with Resetable")]),t._v("\n  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" cloneAndReset"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Cloneable "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("with")]),t._v(" Resetable"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Cloneable "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("val")]),t._v(" cloned "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("clone"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    obj"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("reset\n    cloned\n  "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);