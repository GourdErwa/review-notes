(window.webpackJsonp=window.webpackJsonp||[]).push([[175],{549:function(t,s,a){"use strict";a.r(s);var n=a(10),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("blockquote",[a("p",[t._v("专栏原创出处："),a("a",{attrs:{href:"https://github.com/GourdErwa/review-notes/tree/master/language/java-jvm",target:"_blank",rel:"noopener noreferrer"}},[t._v("github-源笔记文件 "),a("OutboundLink")],1),t._v(" ，"),a("a",{attrs:{href:"https://github.com/GourdErwa/java-advanced/tree/master/java-jvm",target:"_blank",rel:"noopener noreferrer"}},[t._v("github-源码 "),a("OutboundLink")],1),t._v("，欢迎 Star，转载请附上原文出处链接和本声明。")])]),t._v(" "),a("p",[t._v("Java JVM-虚拟机专栏系列笔记，系统性学习可访问个人复盘笔记-技术博客 "),a("a",{attrs:{href:"https://review-notes.top/language/java-jvm/",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java JVM-虚拟机 "),a("OutboundLink")],1)]),t._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#一、前言"}},[t._v("一、前言")])]),a("li",[a("a",{attrs:{href:"#二、先下结论"}},[t._v("二、先下结论")])]),a("li",[a("a",{attrs:{href:"#三、逐步验证结论"}},[t._v("三、逐步验证结论")]),a("ul",[a("li",[a("a",{attrs:{href:"#_1-类变量的初始化及赋值"}},[t._v("1. 类变量的初始化及赋值")])]),a("li",[a("a",{attrs:{href:"#_2-实例变量的初始化及赋值"}},[t._v("2. 实例变量的初始化及赋值")])])])]),a("li",[a("a",{attrs:{href:"#四、关于类成员内存分配"}},[t._v("四、关于类成员内存分配")])]),a("li",[a("a",{attrs:{href:"#专栏更多文章笔记"}},[t._v("专栏更多文章笔记")])])])]),a("p"),t._v(" "),a("h2",{attrs:{id:"一、前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#一、前言"}},[t._v("#")]),t._v(" 一、前言")]),t._v(" "),a("p",[t._v("前面我们分析过 "),a("a",{attrs:{href:"https://gourderwa.blog.csdn.net/article/details/103828111",target:"_blank",rel:"noopener noreferrer"}},[t._v("从虚拟机的角度看对象的创建与访问 "),a("OutboundLink")],1),t._v("。")]),t._v(" "),a("p",[t._v("现在我们站在程序员角度，来看一下我们定义的一个个类及类里面的成员变量是怎么初始化的，分别什么时候初始化，以及初始化顺序和内存分配。")]),t._v(" "),a("blockquote",[a("p",[t._v("公网上的文章写一堆代码打印一些信息进行分析，有些把语句块的加载顺序都下结论了，这种理解对于初学者来说可行，但是随着深入的学习我们应该试着从虚拟机角度去分析整个过程。")])]),t._v(" "),a("p",[t._v("本文从字节码及类加载过程结合虚拟机内存模型进行分析，无需进行大量源码打印，愿意验证的朋友可以采用该方法进行更复杂的初始化过程分析。")]),t._v(" "),a("p",[t._v("首先我们统一一下概念：")]),t._v(" "),a("ul",[a("li",[t._v("类变量，表示 static 修饰的成员变量")]),t._v(" "),a("li",[t._v("类常量，表示 static final 修饰的基本数据类型与字符串成员变量")]),t._v(" "),a("li",[t._v("静态语句块，使用 static{} 包起来的语句块")]),t._v(" "),a("li",[t._v("实例变量，表示随着类初始化而初始化的成员变量")]),t._v(" "),a("li",[t._v("实例构造器语句块，使用 {} 包起来的语句块")])]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Father")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 类常量")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" STATIC_FINAL "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"static-final-Father"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 类变量")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" STATIC "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"static-Father"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 类变量")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" STATIC_METHOD "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("staticMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 静态语句块")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"static{}-Father"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("STATIC_FINAL"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("STATIC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("STATIC_METHOD"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 类方法（静态方法）")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("staticMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"staticMethod"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 实例变量")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"name-Father"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" o "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 实例构造器")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Father")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Constructor-Father"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    \n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 实例构造器语句块")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h2",{attrs:{id:"二、先下结论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#二、先下结论"}},[t._v("#")]),t._v(" 二、先下结论")]),t._v(" "),a("p",[t._v("如果在类里定义了类变量（static 修饰的变量），则为类生成一个类构造器 "),a("code",[t._v("<clinit>")]),t._v(" 方法用于初始化类变量。同时为对象生成实例构造器 "),a("code",[t._v("<init>")]),t._v(" 方法用于初始化对象实例。")]),t._v(" "),a("blockquote",[a("p",[t._v("在此确认理解了「类构造器」「对象实例构造器（构造函数）」这两个概念。")])]),t._v(" "),a("p",[t._v("当我们第一次创建一个类的实例对象时，大体流程如下：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("类加载中的准备阶段")]),t._v(" "),a("ul",[a("li",[t._v("会为类常量（static final 修饰的基本数据类型与字符串成员变量）在常量池分配内存并设值。")]),t._v(" "),a("li",[t._v("同时对类变量初始化（int 设为 0，对象设为 null 等）。")])])]),t._v(" "),a("li",[a("p",[t._v("类加载中的初始化阶段，执行类构造器 "),a("code",[t._v("<clinit>")]),t._v(" 方法为类变量赋值。")])]),t._v(" "),a("li",[a("p",[t._v("此时，类变量初始化完成，类变量在类加载阶段仅初始化一次。（后续创建对象实例时不再初始化了）")])]),t._v(" "),a("li",[a("p",[t._v("使用 new 关键字创建对象实例时，虚拟机会将声明的实例变量、实例构造器语句块合并为一个 "),a("code",[t._v("<init>")]),t._v(" 方法一起执行。")])])]),t._v(" "),a("p",[t._v("以上过程中如果加载类有父类，则先加载父类。如果 new 创建对象实例时，对象有父类，则先调用父类的构造方法。")]),t._v(" "),a("h2",{attrs:{id:"三、逐步验证结论"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#三、逐步验证结论"}},[t._v("#")]),t._v(" 三、逐步验证结论")]),t._v(" "),a("h3",{attrs:{id:"_1-类变量的初始化及赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-类变量的初始化及赋值"}},[t._v("#")]),t._v(" 1. 类变量的初始化及赋值")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Father")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" STATIC_FINAL "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"static-final-Father"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" STATIC "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"static-Father"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" STATIC_METHOD "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("staticMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("staticMethod")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"staticMethod"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n最终生成的 `"),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("clinit"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("` 方法字节码：\n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" ldc          #"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" 将常量 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Father")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 字符串压入栈顶\n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" putstatic    #"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v(" 将栈顶常量 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Father")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" 字符串赋值给 "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Father")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("STATIC"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" invokestatic #"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),t._v(" 执行静态方法 "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Father")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("staticMethod"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" 返回字符串\n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(" putstatic    #"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),t._v(" 将静态方法返回的字符串赋值给 "),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Father")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("STATIC_METHOD"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n")])])]),a("p",[t._v("我们可以发现 STATIC_FINAL 常量并没有在 clinit 方法中，因为在准备阶段已经在常量池分配好了。")]),t._v(" "),a("p",[t._v("但是呢，STATIC_METHOD 我们也声明为 final 了，为什么还在 clinit 方法中赋值了呢？因为赋值的是一个方法调用，需要在类加载的初始化阶段调用一次方法进行赋值（字节码 "),a("code",[t._v("8 putstatic")]),t._v("）。")]),t._v(" "),a("h3",{attrs:{id:"_2-实例变量的初始化及赋值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-实例变量的初始化及赋值"}},[t._v("#")]),t._v(" 2. 实例变量的初始化及赋值")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RefObjInit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" stringFinal "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ref-final-ConstantInit"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" string "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"ref-ConstantInit"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),t._v(" o "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n最终生成的 `"),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),t._v("init"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("` 方法字节码：\n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v(" aload_0          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将 this 压入栈顶")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" invokespecial #"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 调用父类（Object.<init>）构造方法")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" aload_0          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将 this 压入栈顶")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" ldc           #"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将常量 <ref-final-ConstantInit> 压入栈顶")]),t._v("\n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(" putfield      #"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将常量赋值给 <RefObjInit.stringFinal>")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(" aload_0          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将 this 压入栈顶")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("11")]),t._v(" ldc           #"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将常量 <ref-ConstantInit> 压入栈顶")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),t._v(" putfield      #"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将常量赋值给 <RefObjInit.string>")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("16")]),t._v(" aload_0          "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 将 this 压入栈顶")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("17")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v("           #"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建一个 Object 准备赋值给 o")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),t._v(" dup          \n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("21")]),t._v(" invokespecial #"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("24")]),t._v(" putfield      #"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 创建的 Object 赋值给 o")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("27")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n")])])]),a("p",[t._v("我们可以发现该类中未声明任何实例构造器，但是编译器为我们生成的 "),a("code",[t._v("<init>")]),t._v(" 方法对上面声明的实例变量进行了赋值操作。")]),t._v(" "),a("blockquote",[a("p",[t._v("虽然 stringFinal 实例变量声明为 final，但是还是进行一次赋值。")])]),t._v(" "),a("h2",{attrs:{id:"四、关于类成员内存分配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#四、关于类成员内存分配"}},[t._v("#")]),t._v(" 四、关于类成员内存分配")]),t._v(" "),a("blockquote",[a("p",[t._v("class 文件编译后会生成一个常量池。")]),t._v(" "),a("p",[t._v("常量池中主要存放两大类常量：\n字面量和符号引用。字面量比较接近于 Java 语言层面的常量概念，如文本字符串、被声明为 final 的常量值等。符号引用可以理解为类、接口、字段、方法、方法句柄等描述符。")]),t._v(" "),a("p",[t._v("比如说 a.method() ，a 会编译为一个符号引用，在执行方法的时候 a 被替换为真正的实例对象引用。")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("字符串，分配在字符串常量池（JDK 8 后在字符串常量池分配在堆里）")])]),t._v(" "),a("li",[a("p",[t._v("类常量，如果基础数据类型分配在常量池。如果引用类型引用对象的实例数据分配在堆。")])]),t._v(" "),a("li",[a("p",[t._v("类变量，分配在常量池，如果是引用类型，引用对象的实例数据分配在堆。")])]),t._v(" "),a("li",[a("p",[t._v("实例变量，无论基础数据类型还是引用类型，都分配在堆。")])]),t._v(" "),a("li",[a("p",[t._v("局部变量（方法内部创建的变量）。基础数据类型分配在栈桢。引用类型引用分配在栈桢，引用的实例数据分配在堆上。")])])]),t._v(" "),a("blockquote",[a("p",[t._v("实例变量中的基础类型特例：如果在方法内创建了对象，但是经过「方法逃逸」分析后该对象并没有逃逸出方法，则可以在栈桢上直接分配基础类型，用完即毁。")])]),t._v(" "),a("p",[a("strong",[t._v("此处声明一个误区")])]),t._v(" "),a("p",[t._v("大部分人一般说内存分配时，直接会说基础数据类型分配在栈，对象数据在堆上是有问题的。这种理解是错误的。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RefInit")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RefInit")]),t._v(" o "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RefInit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// o 里面的 i 字段在堆里")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("p",[t._v("我们可以总结为在未被优化（比如逃逸分析）的概念中，对象的实例数据都是在堆上。对象的引用（指针）数据根据作用域及修饰词的不同，可能会被分配在常量池、栈桢的局部变量表、堆里。")]),t._v(" "),a("h2",{attrs:{id:"专栏更多文章笔记"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#专栏更多文章笔记"}},[t._v("#")]),t._v(" 专栏更多文章笔记")]),t._v(" "),a("ul",[a("li",[a("p",[a("a",{attrs:{href:"https://gourderwa.blog.csdn.net/article/details/104020339",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java 核心知识-专栏文章目录汇总 "),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://blog.csdn.net/xiaohulunb/article/details/103594468",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java 并发编程-专栏文章目录汇总 "),a("OutboundLink")],1)])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://blog.csdn.net/xiaohulunb/article/details/103828570",target:"_blank",rel:"noopener noreferrer"}},[t._v("Java JVM（JDK13）-专栏文章目录汇总 "),a("OutboundLink")],1)])])])])}),[],!1,null,null,null);s.default=e.exports}}]);